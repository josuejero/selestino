selestino/
    requirements.txt
    generate_project_structure.py

    # Content of generate_project_structure.py:
    import os
    
    def list_files(startpath):
        with open('docs/project_structure_and_code.txt', 'w') as f:
            for root, dirs, files in os.walk(startpath):
                # Exclude the env directory
                dirs[:] = [d for d in dirs if d != 'env']
                level = root.replace(startpath, '').count(os.sep)
                indent = ' ' * 4 * (level)
                f.write('{}{}/\n'.format(indent, os.path.basename(root)))
                subindent = ' ' * 4 * (level + 1)
                for file in files:
                    f.write('{}{}\n'.format(subindent, file))
                    if file.endswith('.py'):
                        f.write('\n{}# Content of {}:\n'.format(subindent, file))
                        with open(os.path.join(root, file), 'r') as py_file:
                            for line in py_file:
                                f.write('{}{}'.format(subindent, line))
                        f.write('\n')
    
    if __name__ == "__main__":
        project_root = os.path.dirname(os.path.abspath(__file__))
        list_files(project_root)
        print("Project structure and code have been written to 'project_structure_and_code.txt'")

    .gitignore
    manage.py

    # Content of manage.py:
    #!/usr/bin/env python
    """Django's command-line utility for administrative tasks."""
    import os
    import sys
    
    
    def main():
        """Run administrative tasks."""
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
        try:
            from django.core.management import execute_from_command_line
        except ImportError as exc:
            raise ImportError(
                "Couldn't import Django. Are you sure it's installed and "
                "available on your PYTHONPATH environment variable? Did you "
                "forget to activate a virtual environment?"
            ) from exc
        execute_from_command_line(sys.argv)
    
    
    if __name__ == '__main__':
        main()

    project_structure_and_code.txt
    selestino/
        asgi.py

        # Content of asgi.py:
        """
        ASGI config for selestino project.
        
        It exposes the ASGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
        """
        
        import os
        
        from django.core.asgi import get_asgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
        
        application = get_asgi_application()

        __init__.py

        # Content of __init__.py:

        settings.py

        # Content of settings.py:
        """
        Django settings for selestino project.
        
        Generated by 'django-admin startproject' using Django 5.0.7.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.0/topics/settings/
        
        For the full list of settings and their values, see
        https://docs.djangoproject.com/en/5.0/ref/settings/
        """
        
        from pathlib import Path
        
        # Build paths inside the project like this: BASE_DIR / 'subdir'.
        BASE_DIR = Path(__file__).resolve().parent.parent
        
        
        # Quick-start development settings - unsuitable for production
        # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
        
        # SECURITY WARNING: keep the secret key used in production secret!
        SECRET_KEY = 'django-insecure-f#1peyf4^2gxuzrv&8c6pee886srz15*640%-vu&xfkc_iiwvz'
        
        # SECURITY WARNING: don't run with debug turned on in production!
        DEBUG = True
        
        ALLOWED_HOSTS = []
        
        
        # Application definition
        
        INSTALLED_APPS = [
            'django.contrib.admin',
            'django.contrib.auth',
            'django.contrib.contenttypes',
            'django.contrib.sessions',
            'django.contrib.messages',
            'django.contrib.staticfiles',
            'recipeservice',  # <-- Add this line
        ]
        
        MIDDLEWARE = [
            'django.middleware.security.SecurityMiddleware',
            'django.contrib.sessions.middleware.SessionMiddleware',
            'django.middleware.common.CommonMiddleware',
            'django.middleware.csrf.CsrfViewMiddleware',
            'django.contrib.auth.middleware.AuthenticationMiddleware',
            'django.contrib.messages.middleware.MessageMiddleware',
            'django.middleware.clickjacking.XFrameOptionsMiddleware',
        ]
        
        ROOT_URLCONF = 'selestino.urls'
        
        TEMPLATES = [
            {
                'BACKEND': 'django.template.backends.django.DjangoTemplates',
                'DIRS': [],
                'APP_DIRS': True,
                'OPTIONS': {
                    'context_processors': [
                        'django.template.context_processors.debug',
                        'django.template.context_processors.request',
                        'django.contrib.auth.context_processors.auth',
                        'django.contrib.messages.context_processors.messages',
                    ],
                },
            },
        ]
        
        WSGI_APPLICATION = 'selestino.wsgi.application'
        
        
        # Database
        # https://docs.djangoproject.com/en/5.0/ref/settings/#databases
        
        DATABASES = {
            'default': {
                'ENGINE': 'django.db.backends.postgresql',
                'NAME': 'selestino',
                'USER': 'josuejero',
                'PASSWORD': 'peruano1',
                'HOST': 'localhost',
                'PORT': '',
            }
        }
        
        
        # Password validation
        # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
        
        AUTH_PASSWORD_VALIDATORS = [
            {
                'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
            },
            {
                'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
            },
        ]
        
        
        # Internationalization
        # https://docs.djangoproject.com/en/5.0/topics/i18n/
        
        LANGUAGE_CODE = 'en-us'
        
        TIME_ZONE = 'UTC'
        
        USE_I18N = True
        
        USE_TZ = True
        
        
        # Static files (CSS, JavaScript, Images)
        # https://docs.djangoproject.com/en/5.0/howto/static-files/
        
        # settings.py
        
        STATIC_URL = '/static/'
        STATICFILES_DIRS = [BASE_DIR / "static"]
        STATIC_ROOT = BASE_DIR / "staticfiles"
        
        
        
        # Default primary key field type
        # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
        
        DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

        urls.py

        # Content of urls.py:
        from django.contrib import admin
        from django.urls import include, path
        
        urlpatterns = [
            path('admin/', admin.site.urls),
            path('', include('recipeservice.urls')),
        ]

        wsgi.py

        # Content of wsgi.py:
        """
        WSGI config for selestino project.
        
        It exposes the WSGI callable as a module-level variable named ``application``.
        
        For more information on this file, see
        https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
        """
        
        import os
        
        from django.core.wsgi import get_wsgi_application
        
        os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
        
        application = get_wsgi_application()

        __pycache__/
            urls.cpython-312.pyc
            settings.cpython-312.pyc
            __init__.cpython-312.pyc
    tests/
        test_admin.py

        # Content of test_admin.py:
        from django.test import TestCase
        from django.contrib import admin
        from recipeservice.models import Ingredient, Recipe, Review
        from recipeservice.admin import IngredientAdmin, RecipeAdmin, ReviewAdmin, ReviewInline
        
        
        class AdminSiteTest(TestCase):
            def test_models_registered(self):
                self.assertIn(Ingredient, admin.site._registry)
                self.assertIn(Recipe, admin.site._registry)
                self.assertIn(Review, admin.site._registry)
        
            def test_custom_admin_class(self):
                self.assertIsInstance(admin.site._registry[Ingredient], IngredientAdmin)
                self.assertIsInstance(admin.site._registry[Recipe], RecipeAdmin)
                self.assertIsInstance(admin.site._registry[Review], ReviewAdmin)
        
        class RecipeAdminTest(TestCase):
            def test_list_display(self):
                admin_class = admin.site._registry[Recipe]
                self.assertEqual(admin_class.list_display, ['title', 'cuisine_type', 'difficulty', 'total_time'])
        
            def test_search_fields(self):
                admin_class = admin.site._registry[Recipe]
                self.assertEqual(admin_class.search_fields, ['title', 'cuisine_type'])
        
            def test_list_filter(self):
                admin_class = admin.site._registry[Recipe]
                self.assertEqual(admin_class.list_filter, ['difficulty', 'cuisine_type'])
        
        class ReviewInlineTest(TestCase):
            def test_inline(self):
                admin_class = admin.site._registry[Recipe]
                print(admin_class.inlines)  # Add this line for debugging
                self.assertTrue(ReviewInline in admin_class.inlines)

        test_pytest_admin.py

        # Content of test_pytest_admin.py:
        import pytest
        from django.contrib import admin
        from recipeservice.models import Ingredient, Recipe, Review
        
        @pytest.mark.django_db
        def test_admin_registration():
            assert Ingredient in admin.site._registry
            assert Recipe in admin.site._registry
            assert Review in admin.site._registry

        __init__.py

        # Content of __init__.py:

        test_views.py

        # Content of test_views.py:
        from django.test import TestCase
        from django.urls import reverse
        from recipeservice.models import Recipe
        
        class RecipeViewTests(TestCase):
            def setUp(self):
                self.recipe = Recipe.objects.create(title="Pasta", prep_time=10, cook_time=15)
        
            def test_recipe_list_view(self):
                response = self.client.get(reverse('recipe_list'))
                self.assertEqual(response.status_code, 200)
                self.assertContains(response, "Pasta")
        
            def test_recipe_detail_view(self):
                response = self.client.get(reverse('recipe_detail', args=[self.recipe.id]))
                self.assertEqual(response.status_code, 200)
                self.assertContains(response, "Pasta")
        
            def test_add_recipe_view(self):
              response = self.client.post(reverse('add_recipe'), {
                  'title': 'Salad',
                  'description': 'Fresh salad',
                  'prep_time': 5,
                  'cook_time': 0,
                  'instructions': 'Mix ingredients',
                  'ingredients': [self.recipe.ingredients.create(name="Lettuce", quantity="1 cup").id],
                  'difficulty': 'Easy',  # Add this line
                  'cuisine_type': 'American',  # Add this line
              })
              if response.status_code != 302:
                  print(response.context['form'].errors)
              self.assertEqual(response.status_code, 302)  # Redirect after successful form submission

        test_functional_admin.py

        # Content of test_functional_admin.py:
        from django.urls import reverse
        from django.contrib.auth.models import User
        from django.test import TestCase
        
        class AdminPageAccessTest(TestCase):
            def setUp(self):
                self.user = User.objects.create_superuser('admin', '[email protected]', 'password')
                self.client.force_login(self.user)
        
            def test_recipe_changelist_page(self):
                url = reverse('admin:recipeservice_recipe_changelist')
                response = self.client.get(url)
                self.assertEqual(response.status_code, 200)
        
            def test_ingredient_changelist_page(self):
                url = reverse('admin:recipeservice_ingredient_changelist')
                response = self.client.get(url)
                self.assertEqual(response.status_code, 200)

        test_models.py

        # Content of test_models.py:
        from django.test import TestCase
        from recipeservice.models import Ingredient, Recipe, Review
        
        class IngredientModelTest(TestCase):
            def test_string_representation(self):
                ingredient = Ingredient(name="Tomato", quantity="2 cups")
                self.assertEqual(str(ingredient), "Tomato")
        
        class RecipeModelTest(TestCase):
            def test_string_representation(self):
                recipe = Recipe(title="Pasta")
                self.assertEqual(str(recipe), "Pasta")
        
            def test_total_time_calculation(self):
                # Create a Recipe instance with specific prep_time and cook_time
                recipe = Recipe.objects.create(
                    title="Pasta",
                    prep_time=10,
                    cook_time=20,
                    description="Tasty pasta",
                    cuisine_type="Italian",
                    difficulty="Medium"
                )
                # Save the recipe and check that total_time is correctly calculated
                recipe.save()
                self.assertEqual(recipe.total_time, 30)
        
            def test_default_values(self):
                recipe = Recipe(title="Pasta")
                self.assertEqual(recipe.cuisine_type, "Unknown")
                self.assertEqual(recipe.difficulty, "Easy")
        
        class ModelStrMethodTests(TestCase):
            def test_ingredient_str(self):
                ingredient = Ingredient.objects.create(name="Tomato", quantity="2")
                self.assertEqual(str(ingredient), "Tomato")
        
            def test_recipe_str(self):
                recipe = Recipe.objects.create(title="Pasta", description="Tasty pasta")
                self.assertEqual(str(recipe), "Pasta")
        
            def test_review_str(self):
                recipe = Recipe.objects.create(title="Pasta", description="Tasty pasta")
                review = Review.objects.create(recipe=recipe, user="John Doe", rating=5)
                self.assertEqual(str(review), "John Doe's review of Pasta")
                
        class ManyToManyRelationshipTests(TestCase):
            def test_add_ingredients_to_recipe(self):
                # Create Ingredient instances
                tomato = Ingredient.objects.create(name="Tomato", quantity="2")
                pasta = Ingredient.objects.create(name="Pasta", quantity="200g")
        
                # Create a Recipe and add ingredients
                recipe = Recipe.objects.create(title="Pasta")
                recipe.ingredients.add(tomato, pasta)
        
                # Retrieve the recipe and verify the ingredients
                recipe = Recipe.objects.get(id=recipe.id)
                self.assertIn(tomato, recipe.ingredients.all())
                self.assertIn(pasta, recipe.ingredients.all())
                
        
        class ForeignKeyRelationshipTests(TestCase):
            def test_review_links_to_recipe(self):
                # Create a Recipe instance
                recipe = Recipe.objects.create(title="Pasta", description="Tasty pasta")
        
                # Create a Review instance linked to the recipe
                review = Review.objects.create(recipe=recipe, user="John Doe", rating=5)
        
                # Retrieve the review and verify it links to the correct recipe
                self.assertEqual(review.recipe, recipe)

        __pycache__/
            test_admin.cpython-312.pyc
            test_pytest_admin.cpython-312.pyc
            test_functional_admin.cpython-312.pyc
            test_models.cpython-312.pyc
            __init__.cpython-312.pyc
            test_views.cpython-312.pyc
    docs/
        README.md
        project_structure_and_code.txt
    recipeservice/
        models.py

        # Content of models.py:
        from django.db import models
        
        class Ingredient(models.Model):
            name = models.CharField(max_length=100)
            quantity = models.CharField(max_length=50)
        
            def __str__(self):
                return self.name
        
        class Recipe(models.Model):
            title = models.CharField(max_length=200)
            description = models.TextField()
            ingredients = models.ManyToManyField(Ingredient)
            instructions = models.TextField()
            prep_time = models.IntegerField(default=0)  # Default to 0 minutes
            cook_time = models.IntegerField(default=0)  # Default to 0 minutes
            total_time = models.IntegerField(editable=False, blank=True, null=True)
            cuisine_type = models.CharField(max_length=100, default='Unknown')  # Add this line
            difficulty = models.CharField(max_length=50, choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy')  # Add this line
        
            def save(self, *args, **kwargs):
                self.total_time = (self.prep_time or 0) + (self.cook_time or 0)
                super().save(*args, **kwargs)
        
            def __str__(self):
                return self.title
        
        class Review(models.Model):
            recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE, related_name='reviews')
            user = models.CharField(max_length=100)
            rating = models.PositiveSmallIntegerField(choices=[(i, i) for i in range(1, 6)])
            comment = models.TextField(blank=True, null=True)
            created_at = models.DateTimeField(auto_now_add=True)
        
            def __str__(self):
                return f"{self.user}'s review of {self.recipe.title}"
        

        __init__.py

        # Content of __init__.py:

        apps.py

        # Content of apps.py:
        from django.apps import AppConfig
        
        
        class RecipeserviceConfig(AppConfig):
            default_auto_field = 'django.db.models.BigAutoField'
            name = 'recipeservice'

        forms.py

        # Content of forms.py:
        from django import forms
        from .models import Recipe, Ingredient
        
        class RecipeForm(forms.ModelForm):
            class Meta:
                model = Recipe
                fields = ['title', 'description', 'ingredients', 'instructions', 'prep_time', 'difficulty', 'cuisine_type']
                widgets = {
                    'ingredients': forms.CheckboxSelectMultiple(),
                }
        
        class IngredientForm(forms.ModelForm):
            class Meta:
                model = Ingredient
                fields = ['name', 'quantity']

        admin.py

        # Content of admin.py:
        from django.contrib import admin
        from django.apps import apps
        from .models import Ingredient, Recipe, Review
        
        # Inline for managing Reviews within the Recipe admin interface
        class ReviewInline(admin.TabularInline):
            model = Review
            extra = 1
        
        # Custom Admin for Ingredient model
        @admin.register(Ingredient)
        class IngredientAdmin(admin.ModelAdmin):
            list_display = ['name', 'quantity']
        
        # Custom Admin for Recipe model with Review inline
        @admin.register(Recipe)
        class RecipeAdmin(admin.ModelAdmin):
            list_display = ['title', 'cuisine_type', 'difficulty', 'total_time']
            search_fields = ['title', 'cuisine_type']
            list_filter = ['difficulty', 'cuisine_type']
            readonly_fields = ['total_time']
            inlines = [ReviewInline]
        
        # Custom Admin for Review model
        @admin.register(Review)
        class ReviewAdmin(admin.ModelAdmin):
            list_display = ['recipe', 'user', 'rating', 'created_at']
            list_filter = ['rating']
            search_fields = ['recipe__title', 'user']
        
        # Automatic registration for all models not explicitly registered
        models = apps.get_models()
        for model in models:
            try:
                admin.site.register(model)
            except admin.sites.AlreadyRegistered:
                pass

        urls.py

        # Content of urls.py:
        from django.urls import path
        from . import views
        
        urlpatterns = [
            path('', views.recipe_list, name='recipe_list'),
            path('recipe/<int:id>/', views.recipe_detail, name='recipe_detail'),
            path('recipe/add/', views.add_recipe, name='add_recipe'),
        ]
        views.py

        # Content of views.py:
        from django.shortcuts import render, redirect
        from .models import Recipe
        from .forms import RecipeForm
        
        def recipe_list(request):
            recipes = Recipe.objects.all()
            return render(request, 'recipeservice/recipe_list.html', {'recipes': recipes})
        
        def recipe_detail(request, id):
            recipe = Recipe.objects.get(id=id)
            return render(request, 'recipeservice/recipe_detail.html', {'recipe': recipe})
        
        def add_recipe(request):
            if request.method == 'POST':
                form = RecipeForm(request.POST)
                if form.is_valid():
                    form.save()
                    return redirect('recipe_list')
            else:
                form = RecipeForm()
            return render(request, 'recipeservice/recipe_form.html', {'form': form})
        

        migrations/
            0002_rename_difficulty_level_recipe_difficulty_and_more.py

            # Content of 0002_rename_difficulty_level_recipe_difficulty_and_more.py:
            # Generated by Django 5.1 on 2024-08-10 19:05
            
            from django.db import migrations, models
            
            
            class Migration(migrations.Migration):
            
                dependencies = [
                    ('recipeservice', '0001_initial'),
                ]
            
                operations = [
                    migrations.RenameField(
                        model_name='recipe',
                        old_name='difficulty_level',
                        new_name='difficulty',
                    ),
                    migrations.AddField(
                        model_name='recipe',
                        name='cuisine_type',
                        field=models.CharField(default='International', max_length=100),
                    ),
                ]

            __init__.py

            # Content of __init__.py:

            0001_initial.py

            # Content of 0001_initial.py:
            # Generated by Django 5.1 on 2024-08-10 18:48
            
            import django.db.models.deletion
            from django.db import migrations, models
            
            
            class Migration(migrations.Migration):
            
                initial = True
            
                dependencies = [
                ]
            
                operations = [
                    migrations.CreateModel(
                        name='Ingredient',
                        fields=[
                            ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                            ('name', models.CharField(max_length=100)),
                            ('quantity', models.CharField(max_length=50)),
                        ],
                    ),
                    migrations.CreateModel(
                        name='Recipe',
                        fields=[
                            ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                            ('title', models.CharField(max_length=200)),
                            ('description', models.TextField()),
                            ('instructions', models.TextField()),
                            ('prep_time', models.IntegerField(help_text='Preparation time in minutes')),
                            ('cook_time', models.IntegerField(help_text='Cooking time in minutes')),
                            ('total_time', models.IntegerField(blank=True, null=True)),
                            ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=50)),
                            ('created_at', models.DateTimeField(auto_now_add=True)),
                            ('updated_at', models.DateTimeField(auto_now=True)),
                            ('ingredients', models.ManyToManyField(related_name='recipes', to='recipeservice.ingredient')),
                        ],
                    ),
                    migrations.CreateModel(
                        name='Review',
                        fields=[
                            ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                            ('user', models.CharField(max_length=100)),
                            ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                            ('comment', models.TextField(blank=True, null=True)),
                            ('created_at', models.DateTimeField(auto_now_add=True)),
                            ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='recipeservice.recipe')),
                        ],
                    ),
                ]

            0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.py

            # Content of 0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.py:
            # Generated by Django 5.1 on 2024-08-10 19:19
            
            from django.db import migrations, models
            
            
            class Migration(migrations.Migration):
            
                dependencies = [
                    ('recipeservice', '0002_rename_difficulty_level_recipe_difficulty_and_more'),
                ]
            
                operations = [
                    migrations.RemoveField(
                        model_name='recipe',
                        name='created_at',
                    ),
                    migrations.RemoveField(
                        model_name='recipe',
                        name='updated_at',
                    ),
                    migrations.AlterField(
                        model_name='recipe',
                        name='cook_time',
                        field=models.IntegerField(default=0),
                    ),
                    migrations.AlterField(
                        model_name='recipe',
                        name='cuisine_type',
                        field=models.CharField(default='Unknown', max_length=100),
                    ),
                    migrations.AlterField(
                        model_name='recipe',
                        name='difficulty',
                        field=models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy', max_length=50),
                    ),
                    migrations.AlterField(
                        model_name='recipe',
                        name='ingredients',
                        field=models.ManyToManyField(to='recipeservice.ingredient'),
                    ),
                    migrations.AlterField(
                        model_name='recipe',
                        name='prep_time',
                        field=models.IntegerField(default=0),
                    ),
                    migrations.AlterField(
                        model_name='recipe',
                        name='total_time',
                        field=models.IntegerField(blank=True, editable=False, null=True),
                    ),
                ]

            __pycache__/
                0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.cpython-312.pyc
                0001_initial.cpython-312.pyc
                0002_rename_difficulty_level_recipe_difficulty_and_more.cpython-312.pyc
                __init__.cpython-312.pyc
        management/
            commands/
                seed.py

                # Content of seed.py:
                from django.core.management.base import BaseCommand
                from recipeservice.models import Ingredient, Recipe
                
                class Command(BaseCommand):
                    def handle(self, *args, **kwargs):
                        ingredient1 = Ingredient.objects.create(name='Tomato', quantity='2')
                        ingredient2 = Ingredient.objects.create(name='Onion', quantity='1')
                        recipe = Recipe.objects.create(
                            title='Tomato Soup', 
                            description='A delicious tomato soup', 
                            instructions='Boil the ingredients...',
                            prep_time=10,  # Add prep time
                            cook_time=20   # Add cook time
                        )
                        recipe.ingredients.add(ingredient1, ingredient2)

        __pycache__/
            views.cpython-312.pyc
            urls.cpython-312.pyc
            models.cpython-312.pyc
            admin.cpython-312.pyc
            forms.cpython-312.pyc
            __init__.cpython-312.pyc
            apps.cpython-312.pyc
        templates/
            recipeservice/
                ingredient_form.html
                recipe_detail.html
                recipe_confirm_delete.html
                recipe_form.html
                recipe_list.html
    logs/
        verification_output.txt
    static/
        admin/
            css/
                widgets.css
                dark_mode.css
                login.css
                dashboard.css
                nav_sidebar.css
                responsive.css
                autocomplete.css
                responsive_rtl.css
                forms.css
                unusable_password_field.css
                rtl.css
                base.css
                changelists.css
                vendor/
                    select2/
                        select2.min.css
                        LICENSE-SELECT2.md
                        select2.css
            js/
                urlify.js
                core.js
                actions.js
                prepopulate.js
                cancel.js
                theme.js
                nav_sidebar.js
                autocomplete.js
                inlines.js
                change_form.js
                filters.js
                SelectFilter2.js
                jquery.init.js
                popup_response.js
                SelectBox.js
                calendar.js
                unusable_password_field.js
                prepopulate_init.js
                admin/
                    RelatedObjectLookups.js
                    DateTimeShortcuts.js
                vendor/
                    jquery/
                        jquery.min.js
                        LICENSE.txt
                        jquery.js
                    xregexp/
                        xregexp.min.js
                        xregexp.js
                        LICENSE.txt
                    select2/
                        LICENSE.md
                        select2.full.min.js
                        select2.full.js
                        i18n/
                            pt.js
                            hsb.js
                            vi.js
                            lv.js
                            gl.js
                            pl.js
                            el.js
                            dsb.js
                            et.js
                            is.js
                            sl.js
                            ko.js
                            hr.js
                            ms.js
                            fi.js
                            th.js
                            ru.js
                            eu.js
                            mk.js
                            sq.js
                            ja.js
                            ka.js
                            he.js
                            bg.js
                            hy.js
                            sr-Cyrl.js
                            ne.js
                            af.js
                            id.js
                            az.js
                            ca.js
                            nb.js
                            zh-CN.js
                            zh-TW.js
                            pt-BR.js
                            da.js
                            fa.js
                            de.js
                            en.js
                            bs.js
                            tk.js
                            sv.js
                            hi.js
                            uk.js
                            cs.js
                            km.js
                            fr.js
                            nl.js
                            sr.js
                            hu.js
                            lt.js
                            ar.js
                            sk.js
                            it.js
                            es.js
                            bn.js
                            ro.js
                            ps.js
                            tr.js
            img/
                search.svg
                icon-calendar.svg
                icon-clock.svg
                icon-hidelink.svg
                icon-no.svg
                tooltag-add.svg
                inline-delete.svg
                LICENSE
                icon-changelink.svg
                icon-unknown.svg
                sorting-icons.svg
                icon-viewlink.svg
                icon-yes.svg
                icon-addlink.svg
                icon-unknown-alt.svg
                icon-deletelink.svg
                README.txt
                selector-icons.svg
                calendar-icons.svg
                tooltag-arrowright.svg
                icon-alert.svg
                gis/
                    move_vertex_on.svg
                    move_vertex_off.svg
        recipeservice/
            css/
                style.css
            js/
                script.js
    scripts/
        verify_setup.py

        # Content of verify_setup.py:
        import os
        import subprocess
        
        def run_command(command, description):
            print(f"Running: {description}...\nCommand: {command}\n")
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                output = f"Error: {result.stderr.strip()}\n"
            else:
                output = result.stdout.strip()
            print(output + "\n")
            return output
        
        def main():
            # Prompting user for custom names and paths
            project_name = input("Enter your Django project name (e.g., 'myproject'): ")
            db_name = input("Enter your PostgreSQL database name (e.g., 'myprojectdb'): ")
            db_user = input("Enter your PostgreSQL username (e.g., 'myprojectuser'): ")
            db_password = input("Enter your PostgreSQL password: ")
            github_username = input("Enter your GitHub username: ")
            
            verification_output = []
        
            # Step 1: Install Python and Django
            verification_output.append("Step 1: Install Python and Django")
        
            # 1.1 Check Python Installation
            verification_output.append("Check Python Installation:")
            python_version = run_command("python3 --version", "Checking Python version")
            verification_output.append(python_version)
        
            # 1.2 Check pip and virtualenv installation
            verification_output.append("Check pip and virtualenv Installation:")
            pip_version = run_command("python3 -m pip --version", "Checking pip version")
            verification_output.append(pip_version)
            virtualenv_version = run_command("virtualenv --version", "Checking virtualenv version")
            verification_output.append(virtualenv_version)
        
            # 1.3 Check Virtual Environment Activation
            verification_output.append("Check Virtual Environment Activation:")
            env_name = os.getenv('VIRTUAL_ENV')
            if env_name:
                verification_output.append(f"Virtual environment is activated: {env_name}")
            else:
                verification_output.append("Virtual environment is NOT activated")
        
            # 1.4 Check Django Installation
            verification_output.append("Check Django Installation:")
            django_version = run_command("django-admin --version", "Checking Django version")
            verification_output.append(django_version)
        
            # 1.5 Check Django Project Structure
            verification_output.append("Check Django Project Structure:")
            project_structure = run_command(f"ls {project_name}", f"Listing Django project files in {project_name}")
            verification_output.append(project_structure)
        
            # Step 2: Database Setup with PostgreSQL
            verification_output.append("\nStep 2: Database Setup with PostgreSQL")
        
            # 2.1 Check PostgreSQL Installation
            verification_output.append("Check PostgreSQL Installation:")
            psql_path = run_command("which psql", "Checking PostgreSQL installation")
            verification_output.append(psql_path)
        
            # 2.2 Verify Database Creation
            verification_output.append("Verify PostgreSQL Database Creation:")
            db_list = run_command("psql -c '\\l'", "Listing PostgreSQL databases")
            verification_output.append(db_list)
        
            # 2.3 Test Django-PostgreSQL Connection
            verification_output.append("Test Django-PostgreSQL Connection:")
            migrate_result = run_command(f"python manage.py migrate", "Testing database migration")
            verification_output.append(migrate_result)
        
            # Step 3: Version Control with Git
            verification_output.append("\nStep 3: Version Control with Git")
        
            # 3.1 Check Git Status
            verification_output.append("Check Git Status:")
            git_status = run_command("git status", "Checking git status")
            verification_output.append(git_status)
        
            # 3.2 Check Git Log
            verification_output.append("Check Git Log:")
            git_log = run_command("git log --oneline", "Checking git log")
            verification_output.append(git_log)
        
            # Write the outputs to a file
            with open('logs/verification_output.txt', 'w') as f:
                for line in verification_output:
                    f.write(line + "\n")
        
            print("All steps completed. Output saved to 'verification_output.txt'.")
        
        if __name__ == "__main__":
            main()

    coverage/
