selestino/
    .DS_Store
    requirements.txt
    .coverage
    output.log
    generate_project_structure.py

    # Content of generate_project_structure.py:
    import os
    
    def list_files(startpath):
        with open('project_structure_and_code.txt', 'w') as f:
            for root, dirs, files in os.walk(startpath):
                # Exclude the env directory
                dirs[:] = [d for d in dirs if d != 'env']
                level = root.replace(startpath, '').count(os.sep)
                indent = ' ' * 4 * (level)
                f.write('{}{}/\n'.format(indent, os.path.basename(root)))
                subindent = ' ' * 4 * (level + 1)
                for file in files:
                    f.write('{}{}\n'.format(subindent, file))
                    if file.endswith('.py'):
                        f.write('\n{}# Content of {}:\n'.format(subindent, file))
                        with open(os.path.join(root, file), 'r') as py_file:
                            for line in py_file:
                                f.write('{}{}'.format(subindent, line))
                        f.write('\n')
    
    if __name__ == "__main__":
        project_root = os.path.dirname(os.path.abspath(__file__))
        list_files(project_root)
        print("Project structure and code have been written to 'project_structure_and_code.txt'")

    .gitignore
    .gitattributes
    Jenkinsfile
    project_structure_and_code.txt
    selestino/
        requirements.txt
        .gitignore
        manage.py

        # Content of manage.py:
        #!/usr/bin/env python
        """Django's command-line utility for administrative tasks."""
        import os
        import sys
        
        
        def main():
            """Run administrative tasks."""
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
            try:
                from django.core.management import execute_from_command_line
            except ImportError as exc:
                raise ImportError(
                    "Couldn't import Django. Are you sure it's installed and "
                    "available on your PYTHONPATH environment variable? Did you "
                    "forget to activate a virtual environment?"
                ) from exc
            execute_from_command_line(sys.argv)
        
        
        if __name__ == '__main__':
            main()

        selestino/
            asgi.py

            # Content of asgi.py:
            """
            ASGI config for selestino project.
            
            It exposes the ASGI callable as a module-level variable named ``application``.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
            """
            
            import os
            
            from django.core.asgi import get_asgi_application
            
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
            
            application = get_asgi_application()

            __init__.py

            # Content of __init__.py:

            settings.py

            # Content of settings.py:
            """
            Django settings for selestino project.
            
            Generated by 'django-admin startproject' using Django 5.0.7.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.0/topics/settings/
            
            For the full list of settings and their values, see
            https://docs.djangoproject.com/en/5.0/ref/settings/
            """
            
            from pathlib import Path
            
            # Build paths inside the project like this: BASE_DIR / 'subdir'.
            BASE_DIR = Path(__file__).resolve().parent.parent
            
            
            # Quick-start development settings - unsuitable for production
            # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
            
            # SECURITY WARNING: keep the secret key used in production secret!
            SECRET_KEY = 'django-insecure-f#1peyf4^2gxuzrv&8c6pee886srz15*640%-vu&xfkc_iiwvz'
            
            # SECURITY WARNING: don't run with debug turned on in production!
            DEBUG = True
            
            ALLOWED_HOSTS = []
            
            
            # Application definition
            
            INSTALLED_APPS = [
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                'recipeservice',  # <-- Add this line
            ]
            
            MIDDLEWARE = [
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
                'django.middleware.csrf.CsrfViewMiddleware',
                'django.contrib.auth.middleware.AuthenticationMiddleware',
                'django.contrib.messages.middleware.MessageMiddleware',
                'django.middleware.clickjacking.XFrameOptionsMiddleware',
            ]
            
            ROOT_URLCONF = 'selestino.urls'
            
            TEMPLATES = [
                {
                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
                    'DIRS': [],
                    'APP_DIRS': True,
                    'OPTIONS': {
                        'context_processors': [
                            'django.template.context_processors.debug',
                            'django.template.context_processors.request',
                            'django.contrib.auth.context_processors.auth',
                            'django.contrib.messages.context_processors.messages',
                        ],
                    },
                },
            ]
            
            WSGI_APPLICATION = 'selestino.wsgi.application'
            
            
            # Database
            # https://docs.djangoproject.com/en/5.0/ref/settings/#databases
            
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'selestino',
                    'USER': 'josuejero',
                    'PASSWORD': 'peruano1',
                    'HOST': 'localhost',
                    'PORT': '',
                }
            }
            
            
            # Password validation
            # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
            
            AUTH_PASSWORD_VALIDATORS = [
                {
                    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
                },
            ]
            
            
            # Internationalization
            # https://docs.djangoproject.com/en/5.0/topics/i18n/
            
            LANGUAGE_CODE = 'en-us'
            
            TIME_ZONE = 'UTC'
            
            USE_I18N = True
            
            USE_TZ = True
            
            
            # Static files (CSS, JavaScript, Images)
            # https://docs.djangoproject.com/en/5.0/howto/static-files/
            
            # settings.py
            
            STATIC_URL = '/static/'
            STATICFILES_DIRS = [BASE_DIR / "static"]
            STATIC_ROOT = BASE_DIR / "staticfiles"
            
            
            
            # Default primary key field type
            # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
            
            DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

            urls.py

            # Content of urls.py:
            from django.contrib import admin
            from django.urls import include, path
            
            urlpatterns = [
                path('admin/', admin.site.urls),
                path('', include('recipeservice.urls')),
            ]

            wsgi.py

            # Content of wsgi.py:
            """
            WSGI config for selestino project.
            
            It exposes the WSGI callable as a module-level variable named ``application``.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
            """
            
            import os
            
            from django.core.wsgi import get_wsgi_application
            
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
            
            application = get_wsgi_application()

            __pycache__/
                urls.cpython-312.pyc
                settings.cpython-312.pyc
                __init__.cpython-312.pyc
        tests/
            test_admin.py

            # Content of test_admin.py:
            from django.test import TestCase
            from django.contrib import admin
            from recipeservice.models import Ingredient, Recipe, Review
            from recipeservice.admin import IngredientAdmin, RecipeAdmin, ReviewAdmin, ReviewInline
            
            
            class AdminSiteTest(TestCase):
                def test_models_registered(self):
                    self.assertIn(Ingredient, admin.site._registry)
                    self.assertIn(Recipe, admin.site._registry)
                    self.assertIn(Review, admin.site._registry)
            
                def test_custom_admin_class(self):
                    self.assertIsInstance(admin.site._registry[Ingredient], IngredientAdmin)
                    self.assertIsInstance(admin.site._registry[Recipe], RecipeAdmin)
                    self.assertIsInstance(admin.site._registry[Review], ReviewAdmin)
            
            class RecipeAdminTest(TestCase):
                def test_list_display(self):
                    admin_class = admin.site._registry[Recipe]
                    self.assertEqual(admin_class.list_display, ['title', 'cuisine_type', 'difficulty', 'total_time'])
            
                def test_search_fields(self):
                    admin_class = admin.site._registry[Recipe]
                    self.assertEqual(admin_class.search_fields, ['title', 'cuisine_type'])
            
                def test_list_filter(self):
                    admin_class = admin.site._registry[Recipe]
                    self.assertEqual(admin_class.list_filter, ['difficulty', 'cuisine_type'])
            
            class ReviewInlineTest(TestCase):
                def test_inline(self):
                    admin_class = admin.site._registry[Recipe]
                    print(admin_class.inlines)  # Add this line for debugging
                    self.assertTrue(ReviewInline in admin_class.inlines)

            test_pytest_admin.py

            # Content of test_pytest_admin.py:
            import pytest
            from django.contrib import admin
            from recipeservice.models import Ingredient, Recipe, Review
            
            @pytest.mark.django_db
            def test_admin_registration():
                assert Ingredient in admin.site._registry
                assert Recipe in admin.site._registry
                assert Review in admin.site._registry

            __init__.py

            # Content of __init__.py:

            test_views.py

            # Content of test_views.py:
            from django.test import TestCase
            from django.urls import reverse
            from recipeservice.models import Recipe
            
            class RecipeViewTests(TestCase):
                def setUp(self):
                    self.recipe = Recipe.objects.create(title="Pasta", prep_time=10, cook_time=15)
            
                def test_recipe_list_view(self):
                    response = self.client.get(reverse('recipe_list'))
                    self.assertEqual(response.status_code, 200)
                    self.assertContains(response, "Pasta")
            
                def test_recipe_detail_view(self):
                    response = self.client.get(reverse('recipe_detail', args=[self.recipe.id]))
                    self.assertEqual(response.status_code, 200)
                    self.assertContains(response, "Pasta")
            
                def test_add_recipe_view(self):
                  response = self.client.post(reverse('add_recipe'), {
                      'title': 'Salad',
                      'description': 'Fresh salad',
                      'prep_time': 5,
                      'cook_time': 0,
                      'instructions': 'Mix ingredients',
                      'ingredients': [self.recipe.ingredients.create(name="Lettuce", quantity="1 cup").id],
                      'difficulty': 'Easy',  # Add this line
                      'cuisine_type': 'American',  # Add this line
                  })
                  if response.status_code != 302:
                      print(response.context['form'].errors)
                  self.assertEqual(response.status_code, 302)  # Redirect after successful form submission

            test_functional_admin.py

            # Content of test_functional_admin.py:
            from django.urls import reverse
            from django.contrib.auth.models import User
            from django.test import TestCase
            
            class AdminPageAccessTest(TestCase):
                def setUp(self):
                    self.user = User.objects.create_superuser('admin', '[email protected]', 'password')
                    self.client.force_login(self.user)
            
                def test_recipe_changelist_page(self):
                    url = reverse('admin:recipeservice_recipe_changelist')
                    response = self.client.get(url)
                    self.assertEqual(response.status_code, 200)
            
                def test_ingredient_changelist_page(self):
                    url = reverse('admin:recipeservice_ingredient_changelist')
                    response = self.client.get(url)
                    self.assertEqual(response.status_code, 200)

            test_models.py

            # Content of test_models.py:
            from django.test import TestCase
            from recipeservice.models import Ingredient, Recipe, Review
            
            class IngredientModelTest(TestCase):
                def test_string_representation(self):
                    ingredient = Ingredient(name="Tomato", quantity="2 cups")
                    self.assertEqual(str(ingredient), "Tomato")
            
            class RecipeModelTest(TestCase):
                def test_string_representation(self):
                    recipe = Recipe(title="Pasta")
                    self.assertEqual(str(recipe), "Pasta")
            
                def test_total_time_calculation(self):
                    # Create a Recipe instance with specific prep_time and cook_time
                    recipe = Recipe.objects.create(
                        title="Pasta",
                        prep_time=10,
                        cook_time=20,
                        description="Tasty pasta",
                        cuisine_type="Italian",
                        difficulty="Medium"
                    )
                    # Save the recipe and check that total_time is correctly calculated
                    recipe.save()
                    self.assertEqual(recipe.total_time, 30)
            
                def test_default_values(self):
                    recipe = Recipe(title="Pasta")
                    self.assertEqual(recipe.cuisine_type, "Unknown")
                    self.assertEqual(recipe.difficulty, "Easy")
            
            class ModelStrMethodTests(TestCase):
                def test_ingredient_str(self):
                    ingredient = Ingredient.objects.create(name="Tomato", quantity="2")
                    self.assertEqual(str(ingredient), "Tomato")
            
                def test_recipe_str(self):
                    recipe = Recipe.objects.create(title="Pasta", description="Tasty pasta")
                    self.assertEqual(str(recipe), "Pasta")
            
                def test_review_str(self):
                    recipe = Recipe.objects.create(title="Pasta", description="Tasty pasta")
                    review = Review.objects.create(recipe=recipe, user="John Doe", rating=5)
                    self.assertEqual(str(review), "John Doe's review of Pasta")
                    
            class ManyToManyRelationshipTests(TestCase):
                def test_add_ingredients_to_recipe(self):
                    # Create Ingredient instances
                    tomato = Ingredient.objects.create(name="Tomato", quantity="2")
                    pasta = Ingredient.objects.create(name="Pasta", quantity="200g")
            
                    # Create a Recipe and add ingredients
                    recipe = Recipe.objects.create(title="Pasta")
                    recipe.ingredients.add(tomato, pasta)
            
                    # Retrieve the recipe and verify the ingredients
                    recipe = Recipe.objects.get(id=recipe.id)
                    self.assertIn(tomato, recipe.ingredients.all())
                    self.assertIn(pasta, recipe.ingredients.all())
                    
            
            class ForeignKeyRelationshipTests(TestCase):
                def test_review_links_to_recipe(self):
                    # Create a Recipe instance
                    recipe = Recipe.objects.create(title="Pasta", description="Tasty pasta")
            
                    # Create a Review instance linked to the recipe
                    review = Review.objects.create(recipe=recipe, user="John Doe", rating=5)
            
                    # Retrieve the review and verify it links to the correct recipe
                    self.assertEqual(review.recipe, recipe)

            __pycache__/
                test_admin.cpython-312.pyc
                test_pytest_admin.cpython-312.pyc
                test_functional_admin.cpython-312.pyc
                test_models.cpython-312.pyc
                __init__.cpython-312.pyc
                test_views.cpython-312.pyc
        docs/
            README.md
            project_structure_and_code.txt
        recipeservice/
            models.py

            # Content of models.py:
            from django.db import models
            
            class Ingredient(models.Model):
                name = models.CharField(max_length=100)
                quantity = models.CharField(max_length=50)
            
                def __str__(self):
                    return self.name
            
            class Recipe(models.Model):
                title = models.CharField(max_length=200)
                description = models.TextField()
                ingredients = models.ManyToManyField(Ingredient)
                instructions = models.TextField()
                prep_time = models.IntegerField(default=0)  # Default to 0 minutes
                cook_time = models.IntegerField(default=0)  # Default to 0 minutes
                total_time = models.IntegerField(editable=False, blank=True, null=True)
                cuisine_type = models.CharField(max_length=100, default='Unknown')  # Add this line
                difficulty = models.CharField(max_length=50, choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy')  # Add this line
            
                def save(self, *args, **kwargs):
                    self.total_time = (self.prep_time or 0) + (self.cook_time or 0)
                    super().save(*args, **kwargs)
            
                def __str__(self):
                    return self.title
            
            class Review(models.Model):
                recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE, related_name='reviews')
                user = models.CharField(max_length=100)
                rating = models.PositiveSmallIntegerField(choices=[(i, i) for i in range(1, 6)])
                comment = models.TextField(blank=True, null=True)
                created_at = models.DateTimeField(auto_now_add=True)
            
                def __str__(self):
                    return f"{self.user}'s review of {self.recipe.title}"
            

            __init__.py

            # Content of __init__.py:

            apps.py

            # Content of apps.py:
            from django.apps import AppConfig
            
            
            class RecipeserviceConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'recipeservice'

            forms.py

            # Content of forms.py:
            from django import forms
            from .models import Recipe, Ingredient
            
            class RecipeForm(forms.ModelForm):
                class Meta:
                    model = Recipe
                    fields = ['title', 'description', 'ingredients', 'instructions', 'prep_time', 'difficulty', 'cuisine_type']
                    widgets = {
                        'ingredients': forms.CheckboxSelectMultiple(),
                    }
            
            class IngredientForm(forms.ModelForm):
                class Meta:
                    model = Ingredient
                    fields = ['name', 'quantity']

            admin.py

            # Content of admin.py:
            from django.contrib import admin
            from django.apps import apps
            from .models import Ingredient, Recipe, Review
            
            # Inline for managing Reviews within the Recipe admin interface
            class ReviewInline(admin.TabularInline):
                model = Review
                extra = 1
            
            # Custom Admin for Ingredient model
            @admin.register(Ingredient)
            class IngredientAdmin(admin.ModelAdmin):
                list_display = ['name', 'quantity']
            
            # Custom Admin for Recipe model with Review inline
            @admin.register(Recipe)
            class RecipeAdmin(admin.ModelAdmin):
                list_display = ['title', 'cuisine_type', 'difficulty', 'total_time']
                search_fields = ['title', 'cuisine_type']
                list_filter = ['difficulty', 'cuisine_type']
                readonly_fields = ['total_time']
                inlines = [ReviewInline]
            
            # Custom Admin for Review model
            @admin.register(Review)
            class ReviewAdmin(admin.ModelAdmin):
                list_display = ['recipe', 'user', 'rating', 'created_at']
                list_filter = ['rating']
                search_fields = ['recipe__title', 'user']
            
            # Automatic registration for all models not explicitly registered
            models = apps.get_models()
            for model in models:
                try:
                    admin.site.register(model)
                except admin.sites.AlreadyRegistered:
                    pass

            urls.py

            # Content of urls.py:
            from django.urls import path
            from . import views
            
            urlpatterns = [
                path('', views.recipe_list, name='recipe_list'),
                path('recipe/<int:id>/', views.recipe_detail, name='recipe_detail'),
                path('recipe/add/', views.add_recipe, name='add_recipe'),
            ]
            views.py

            # Content of views.py:
            from django.shortcuts import render, redirect
            from .models import Recipe
            from .forms import RecipeForm
            
            def recipe_list(request):
                recipes = Recipe.objects.all()
                return render(request, 'recipeservice/recipe_list.html', {'recipes': recipes})
            
            def recipe_detail(request, id):
                recipe = Recipe.objects.get(id=id)
                return render(request, 'recipeservice/recipe_detail.html', {'recipe': recipe})
            
            def add_recipe(request):
                if request.method == 'POST':
                    form = RecipeForm(request.POST)
                    if form.is_valid():
                        form.save()
                        return redirect('recipe_list')
                else:
                    form = RecipeForm()
                return render(request, 'recipeservice/recipe_form.html', {'form': form})
            

            migrations/
                0002_rename_difficulty_level_recipe_difficulty_and_more.py

                # Content of 0002_rename_difficulty_level_recipe_difficulty_and_more.py:
                # Generated by Django 5.1 on 2024-08-10 19:05
                
                from django.db import migrations, models
                
                
                class Migration(migrations.Migration):
                
                    dependencies = [
                        ('recipeservice', '0001_initial'),
                    ]
                
                    operations = [
                        migrations.RenameField(
                            model_name='recipe',
                            old_name='difficulty_level',
                            new_name='difficulty',
                        ),
                        migrations.AddField(
                            model_name='recipe',
                            name='cuisine_type',
                            field=models.CharField(default='International', max_length=100),
                        ),
                    ]

                __init__.py

                # Content of __init__.py:

                0001_initial.py

                # Content of 0001_initial.py:
                # Generated by Django 5.1 on 2024-08-10 18:48
                
                import django.db.models.deletion
                from django.db import migrations, models
                
                
                class Migration(migrations.Migration):
                
                    initial = True
                
                    dependencies = [
                    ]
                
                    operations = [
                        migrations.CreateModel(
                            name='Ingredient',
                            fields=[
                                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                                ('name', models.CharField(max_length=100)),
                                ('quantity', models.CharField(max_length=50)),
                            ],
                        ),
                        migrations.CreateModel(
                            name='Recipe',
                            fields=[
                                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                                ('title', models.CharField(max_length=200)),
                                ('description', models.TextField()),
                                ('instructions', models.TextField()),
                                ('prep_time', models.IntegerField(help_text='Preparation time in minutes')),
                                ('cook_time', models.IntegerField(help_text='Cooking time in minutes')),
                                ('total_time', models.IntegerField(blank=True, null=True)),
                                ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=50)),
                                ('created_at', models.DateTimeField(auto_now_add=True)),
                                ('updated_at', models.DateTimeField(auto_now=True)),
                                ('ingredients', models.ManyToManyField(related_name='recipes', to='recipeservice.ingredient')),
                            ],
                        ),
                        migrations.CreateModel(
                            name='Review',
                            fields=[
                                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                                ('user', models.CharField(max_length=100)),
                                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                                ('comment', models.TextField(blank=True, null=True)),
                                ('created_at', models.DateTimeField(auto_now_add=True)),
                                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='recipeservice.recipe')),
                            ],
                        ),
                    ]

                0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.py

                # Content of 0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.py:
                # Generated by Django 5.1 on 2024-08-10 19:19
                
                from django.db import migrations, models
                
                
                class Migration(migrations.Migration):
                
                    dependencies = [
                        ('recipeservice', '0002_rename_difficulty_level_recipe_difficulty_and_more'),
                    ]
                
                    operations = [
                        migrations.RemoveField(
                            model_name='recipe',
                            name='created_at',
                        ),
                        migrations.RemoveField(
                            model_name='recipe',
                            name='updated_at',
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='cook_time',
                            field=models.IntegerField(default=0),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='cuisine_type',
                            field=models.CharField(default='Unknown', max_length=100),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='difficulty',
                            field=models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy', max_length=50),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='ingredients',
                            field=models.ManyToManyField(to='recipeservice.ingredient'),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='prep_time',
                            field=models.IntegerField(default=0),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='total_time',
                            field=models.IntegerField(blank=True, editable=False, null=True),
                        ),
                    ]

                __pycache__/
                    0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.cpython-312.pyc
                    0001_initial.cpython-312.pyc
                    0002_rename_difficulty_level_recipe_difficulty_and_more.cpython-312.pyc
                    __init__.cpython-312.pyc
            management/
                commands/
                    seed.py

                    # Content of seed.py:
                    from django.core.management.base import BaseCommand
                    from recipeservice.models import Ingredient, Recipe
                    
                    class Command(BaseCommand):
                        def handle(self, *args, **kwargs):
                            ingredient1 = Ingredient.objects.create(name='Tomato', quantity='2')
                            ingredient2 = Ingredient.objects.create(name='Onion', quantity='1')
                            recipe = Recipe.objects.create(
                                title='Tomato Soup', 
                                description='A delicious tomato soup', 
                                instructions='Boil the ingredients...',
                                prep_time=10,  # Add prep time
                                cook_time=20   # Add cook time
                            )
                            recipe.ingredients.add(ingredient1, ingredient2)

            __pycache__/
                views.cpython-312.pyc
                urls.cpython-312.pyc
                models.cpython-312.pyc
                admin.cpython-312.pyc
                forms.cpython-312.pyc
                __init__.cpython-312.pyc
                apps.cpython-312.pyc
            templates/
                recipeservice/
                    ingredient_form.html
                    recipe_detail.html
                    recipe_confirm_delete.html
                    recipe_form.html
                    recipe_list.html
        logs/
            verification_output.txt
        static/
            admin/
                css/
                    widgets.css
                    dark_mode.css
                    login.css
                    dashboard.css
                    nav_sidebar.css
                    responsive.css
                    autocomplete.css
                    responsive_rtl.css
                    forms.css
                    unusable_password_field.css
                    rtl.css
                    base.css
                    changelists.css
                    vendor/
                        select2/
                            select2.min.css
                            LICENSE-SELECT2.md
                            select2.css
                js/
                    urlify.js
                    core.js
                    actions.js
                    prepopulate.js
                    cancel.js
                    theme.js
                    nav_sidebar.js
                    autocomplete.js
                    inlines.js
                    change_form.js
                    filters.js
                    SelectFilter2.js
                    jquery.init.js
                    popup_response.js
                    SelectBox.js
                    calendar.js
                    unusable_password_field.js
                    prepopulate_init.js
                    admin/
                        RelatedObjectLookups.js
                        DateTimeShortcuts.js
                    vendor/
                        jquery/
                            jquery.min.js
                            LICENSE.txt
                            jquery.js
                        xregexp/
                            xregexp.min.js
                            xregexp.js
                            LICENSE.txt
                        select2/
                            LICENSE.md
                            select2.full.min.js
                            select2.full.js
                            i18n/
                                pt.js
                                hsb.js
                                vi.js
                                lv.js
                                gl.js
                                pl.js
                                el.js
                                dsb.js
                                et.js
                                is.js
                                sl.js
                                ko.js
                                hr.js
                                ms.js
                                fi.js
                                th.js
                                ru.js
                                eu.js
                                mk.js
                                sq.js
                                ja.js
                                ka.js
                                he.js
                                bg.js
                                hy.js
                                sr-Cyrl.js
                                ne.js
                                af.js
                                id.js
                                az.js
                                ca.js
                                nb.js
                                zh-CN.js
                                zh-TW.js
                                pt-BR.js
                                da.js
                                fa.js
                                de.js
                                en.js
                                bs.js
                                tk.js
                                sv.js
                                hi.js
                                uk.js
                                cs.js
                                km.js
                                fr.js
                                nl.js
                                sr.js
                                hu.js
                                lt.js
                                ar.js
                                sk.js
                                it.js
                                es.js
                                bn.js
                                ro.js
                                ps.js
                                tr.js
                img/
                    search.svg
                    icon-calendar.svg
                    icon-clock.svg
                    icon-hidelink.svg
                    icon-no.svg
                    tooltag-add.svg
                    inline-delete.svg
                    LICENSE
                    icon-changelink.svg
                    icon-unknown.svg
                    sorting-icons.svg
                    icon-viewlink.svg
                    icon-yes.svg
                    icon-addlink.svg
                    icon-unknown-alt.svg
                    icon-deletelink.svg
                    README.txt
                    selector-icons.svg
                    calendar-icons.svg
                    tooltag-arrowright.svg
                    icon-alert.svg
                    gis/
                        move_vertex_on.svg
                        move_vertex_off.svg
            recipeservice/
                css/
                    style.css
                js/
                    script.js
        scripts/
            verify_setup.py

            # Content of verify_setup.py:
            import os
            import subprocess
            
            def run_command(command, description):
                print(f"Running: {description}...\nCommand: {command}\n")
                result = subprocess.run(command, shell=True, capture_output=True, text=True)
                if result.returncode != 0:
                    output = f"Error: {result.stderr.strip()}\n"
                else:
                    output = result.stdout.strip()
                print(output + "\n")
                return output
            
            def main():
                # Prompting user for custom names and paths
                project_name = input("Enter your Django project name (e.g., 'myproject'): ")
                db_name = input("Enter your PostgreSQL database name (e.g., 'myprojectdb'): ")
                db_user = input("Enter your PostgreSQL username (e.g., 'myprojectuser'): ")
                db_password = input("Enter your PostgreSQL password: ")
                github_username = input("Enter your GitHub username: ")
                
                verification_output = []
            
                # Step 1: Install Python and Django
                verification_output.append("Step 1: Install Python and Django")
            
                # 1.1 Check Python Installation
                verification_output.append("Check Python Installation:")
                python_version = run_command("python3 --version", "Checking Python version")
                verification_output.append(python_version)
            
                # 1.2 Check pip and virtualenv installation
                verification_output.append("Check pip and virtualenv Installation:")
                pip_version = run_command("python3 -m pip --version", "Checking pip version")
                verification_output.append(pip_version)
                virtualenv_version = run_command("virtualenv --version", "Checking virtualenv version")
                verification_output.append(virtualenv_version)
            
                # 1.3 Check Virtual Environment Activation
                verification_output.append("Check Virtual Environment Activation:")
                env_name = os.getenv('VIRTUAL_ENV')
                if env_name:
                    verification_output.append(f"Virtual environment is activated: {env_name}")
                else:
                    verification_output.append("Virtual environment is NOT activated")
            
                # 1.4 Check Django Installation
                verification_output.append("Check Django Installation:")
                django_version = run_command("django-admin --version", "Checking Django version")
                verification_output.append(django_version)
            
                # 1.5 Check Django Project Structure
                verification_output.append("Check Django Project Structure:")
                project_structure = run_command(f"ls {project_name}", f"Listing Django project files in {project_name}")
                verification_output.append(project_structure)
            
                # Step 2: Database Setup with PostgreSQL
                verification_output.append("\nStep 2: Database Setup with PostgreSQL")
            
                # 2.1 Check PostgreSQL Installation
                verification_output.append("Check PostgreSQL Installation:")
                psql_path = run_command("which psql", "Checking PostgreSQL installation")
                verification_output.append(psql_path)
            
                # 2.2 Verify Database Creation
                verification_output.append("Verify PostgreSQL Database Creation:")
                db_list = run_command("psql -c '\\l'", "Listing PostgreSQL databases")
                verification_output.append(db_list)
            
                # 2.3 Test Django-PostgreSQL Connection
                verification_output.append("Test Django-PostgreSQL Connection:")
                migrate_result = run_command(f"python manage.py migrate", "Testing database migration")
                verification_output.append(migrate_result)
            
                # Step 3: Version Control with Git
                verification_output.append("\nStep 3: Version Control with Git")
            
                # 3.1 Check Git Status
                verification_output.append("Check Git Status:")
                git_status = run_command("git status", "Checking git status")
                verification_output.append(git_status)
            
                # 3.2 Check Git Log
                verification_output.append("Check Git Log:")
                git_log = run_command("git log --oneline", "Checking git log")
                verification_output.append(git_log)
            
                # Write the outputs to a file
                with open('logs/verification_output.txt', 'w') as f:
                    for line in verification_output:
                        f.write(line + "\n")
            
                print("All steps completed. Output saved to 'verification_output.txt'.")
            
            if __name__ == "__main__":
                main()

        coverage/
    docker/
        requirements.txt
        Dockerfile
        .env
        default.conf
        docker-compose.yml
    .git/
        ORIG_HEAD
        config
        HEAD
        description
        index
        .MERGE_MSG.swp
        packed-refs
        COMMIT_EDITMSG
        FETCH_HEAD
        objects/
            61/
                ba3c261840f7265ba789d08d18345cc12e8a0e
            0d/
                abe976a9aeee5494762cd3020982081dd62bdd
            95/
                3d742086b64d7ada17575a069be9fc4f0fa082
            59/
                162024ed384536040f0bda730abc91bc9658a3
                2b093bc3c32079f61779b387f49ad2b45d2e80
            92/
                b70c29063e75dcb5aa084cab3ca7450b5b3150
                8a4d3766a3573b3bc3015ade9095127c3e69b0
                5d6e740268967963d3f2dd1ad96a0ce3a08a98
                6b8e21b524c4bdd8a2f094d7f8b3043196112a
                24c67c8b8c41eaf827657879da174cd7eb7354
            0c/
                f8a04f6a61443588bd12fe6b0debf756c14033
                31c95ff5a435edd45a3fbfca402e47696a2eb5
            3e/
                2df39fbafcf6c054fb4720f27dfe848564c6eb
                f20519d7b069bd6fba0ec27a2de122bf70d647
            50/
                49528ad0d5901a3499e71a88a36853c19e5639
                000ccd54c837167ab31f6a0696614f0fcce51e
                7c7d9f293deb442690a3cc1d91a6367c38119e
                b4f97276b46f2d3cd7102aaede3c526d3887b6
            68/
                afd6d2592395509b829dc3f4cb7091116999af
                8fe713674b914c519bef018aa47f7a8ba18d58
            57/
                760814489b55373e21cb3106dea98133e5b53e
                0a5669374963a6ed9120aa784b8aaf15bceacc
                3467f5a71d2a2d2c5ae6d8611c70f95e126e43
                1c76d1968e69c49c8a50fb098348e7c3eb9f4e
            3b/
                19285734251bd44ba90495f3edf1429417937f
                0e04887145f2fb573b839a931c94aa57359c7e
                c9366cc00b696a77eb1447e73088f83b1cb683
            9b/
                008e4c145a5eafcd355b21fd6233448589a54b
                a164080cc04d6c67b71d82d1adfe3ea68a8ea8
            9e/
                2968e4d777246ebd282adccfa2dfb7ba958742
                c37bc6eba43a42599857fd84e4d68ad6b4ef9d
            04/
                b25e9684ac096bfbb8ed66c1a13387baf2f3cc
                5b1ec71b4b9d0f3064da52d0478a15a9a6c2b3
                c02741ad3052841a6eae6ac680b571699a8d3a
            6a/
                47e70892e8bb19a892cbd8c375065e8158b98f
            32/
                e5ac7de893370dfbbffa11a373a9c3b3662d12
            35/
                8572a6576bb33f5a4a16763803c2769d48f278
                3a7070b07375875ee85814971bc36679ad8b9a
                31f96b1326197877772a08ada29c61dc8069f9
                c01e57312b99eb31d5c0ea6b03c59393dac27c
                eb1ddfbbc029bcab630581847471d7f238ec53
                ed6804458ae390e4376e1cebb6f630e8fe956f
            69/
                57412462fcf6f51064dc6e5f1c68f380c71063
            56/
                67af52f471e6e4472f4a338538c6deec632121
            51/
                90d4215d357458438d62e1167a19ec8417e66e
            3d/
                eeb01aa07c0350643ab1995c43bbedb550c54b
                5bf09dbd5b041381511a5c0becbdf6cc9c16ac
                b4ec7fa6612625ec731a2103a489bcdbce4637
            58/
                83d877e89b89d42fa121725ae7b726dbfa5f50
            67/
                5e9b55fb381b000559f7f8e07756a2c644ec1a
                d8f92216a874405a9dbaca5b86112a72c039da
            0b/
                9c1fe0c08003d45f8e17b0532541ef751fe816
                4f9586477862707f5c40eab6f31c07ad8b5912
            93/
                2e824c1c984549a74120a9a02febb17da5de27
            0e/
                57972446175deb7e9204ff7fda2fcc7c47e632
                60c9eb2c3e948c26918f4f2c54b48e20a92758
            60/
                f23ee7846239d81349ef57a233de586997e38e
                7687b5b78168f8d562ac1ce51d7006f1445000
                c593b705d7331a443f1843fdd633e61adc1a05
            5a/
                716c798dd4764e889a8d4230cf2b321012ba31
            5f/
                1f33a46ee15e7e530fed3bb156733aa2d93a72
                31d99b2b275c3683a80af420dfa3bbf358c35d
                3338bf6f23da395f36f2ca4a080e3de77729f7
            33/
                40f360df9b93a42d4fbd246af4e6c3783796b1
                b57848425585f123cae94049c37fb2391249a0
            9c/
                22bfaa770daa6a81286206302b6275d632607f
            02/
                f283abada802aa2dc4fab5181c166ab711b75a
            a4/
                a51d290b34914c3fa7d46e7b11ddd002a654e9
                4ff063813b8ccf610e61d6da178f7307935dbe
                faaa1dfa226ac68c6a7898f7161d0e2956dcb3
            a3/
                263b5739d31842e4af16612c55d9574254d7c6
            b5/
                da1a6b496e342398ceb1845b1bd186e95fdfbf
                1144080ecc717baba34a917adec0da373a7c0e
            ac/
                6e07a1d1c364a54e622908e48a84ab211f1b4d
                2832601cf6c1d58004a58ae9938a5434f961e1
            ad/
                75316418984244daa13b8b6a1559fd32841686
                2982006f5f91669596a9267c29611443074825
                964d7b17ba025d3488eee2d9e0f887e73fc7b1
            bb/
                afb29cadfc9de5f4b603cb8a420e3deab8b878
                69c3e26399a63c627cefcf7e64dba30c3da5f6
                3fb0467d874e34e2837e41c3a2a2dfeec6d7cf
            d7/
                46fa3a350f3d2cd03337f959b896fe4b8de161
            d0/
                fcd53c97011c086aa396aecee8bc4568d3c7d0
            da/
                1eb424e90e7e07b1248d547342b22ac410b5b1
            b4/
                4088f87eef3b0f069481a1c11d6b36bc969bd2
            a2/
                7fdfb897ef757aa83d4445f9d43c4e52ecb080
            a5/
                8841f004129659c58f6cfa9c05174e0e63c63b
            bd/
                22b6fe01a2b1bfe09d3fbb99cc7aef762979bb
            d1/
                8eaf54d35504e48f4f3590abc39eb9cf3ac172
            d6/
                e1191236f69bbf11de65be9fd09cd51adb1b73
            bc/
                d9ec2be6f72e0280069fc51378ee9cce5af085
                1decb354167088b02e91c7e08e54424223b42b
                3accea371cbe352e27ebc4cdbb2670745d6f10
            ab/
                5cd5933e47b66154886ad069e6a141ede7e2d1
            e5/
                1ea83f5bb0e420a11f6b91c18654d0a227da97
                e2f36ca4fc992257fd0bd6b54e31d48406ee3e
            e2/
                51cde18a809fdcc2504c92136dd6b635be7cc7
                c4b9ae60703006a876aad1c52e2b2b9727e800
            f4/
                0b27f47da411062930b3758fc7b242e932f91e
                243ddf1d1465975c53d030d8e8b5fddd04c44d
            f3/
                ed798434baac41fa8eacbfa48eded2308812c4
            c7/
                cee72e870aa265a47a71d2de804c65c721ca66
                13001f8a650a46c96bfce5bba4a04e7c2dce70
            ee/
                1b42c959fdcd77a98fac91863b10c55e0ee25d
            c9/
                91e2550ae4f276c4269b3314b7fc127460ed87
                5f7815cd368217fcd1475e5e7b94851697f036
            fc/
                4c0bf05126d2cbac929bb11752173305462fd8
            fd/
                a2faaa11a95f5c921d195cfeb2fdebe1855788
            f2/
                467331ac7a3f52c0a3e6b2bf191b08d69b21bb
                880fb0043b8dabc9f83fe5fe73223e4499eccb
            f5/
                fd22ea3d637bb7208b617375d27025c1bed8e3
                536ebc2d3b10ded6750bd5d9eba59566733ea7
                d62aab0044ec4f3933cf186756dedd23db5231
            e3/
                979ff58b4881a233dd2ba19e4943594dc97d20
            cf/
                315cafc3390b7274a9d0986a196ddee0db6f55
            e4/
                75a019acfb5e0e5a2780e4ab3feb83a0707e52
            fe/
                cf0f47984146fb69c11de7ce013b94ec59702d
            c8/
                c69b2acc1cd0104aa9fbcd61893d9eeace8f25
            fb/
                d6b99d39c740305b83430d79b828b9f29d6b4e
                4218a36092333df3d1a3d775a8a04a53bfc1b3
            c1/
                e79759a7630fbd25290e85c7c5e90f2e3b7927
                f56149c063f3c580c6b7212894ad99236018ba
                37fa5858d0018989f4c0808080ea0d1889e668
                b09a10827f0acf27e4645e468301677586d18a
            ec/
                26238c29accdd8df23a1616a388ecbb534c402
            4e/
                490eab1427dac749ea799855c1c75180ec256d
            20/
                7ce0745df08efdea808aaab0c14f2084fb09f5
                8a00570578b507081cb1e77ff8bb75e3f13b22
                e5f45db04c623b0025d2a4ce9d99e90ed64d3c
                99ad4d3d8e5b513a403ebdd2dcc860ccae55cb
            18/
                ff2cc856434103ec0159d6d368eeefb801a758
            27/
                9b12da6ad2642b8b68aff389ed9b6a34acc8f4
                a44b61a283e495171d43544a9f754a47bd4dcd
            4b/
                cb9bbf32a258a8586a2e21246f0ca36d2000b0
            pack/
                pack-068120a0efebbb4e2e739403742a1fa948fedd27.pack
                pack-068120a0efebbb4e2e739403742a1fa948fedd27.idx
            7d/
                199d2205997f8286faf49baba7946771ffa85f
            29/
                0e3007ba3297ec7dbab1ffc3a1079ec06e5a56
            7c/
                18ad59dfc37f537cfd158e9222062fa9196e37
                31ec91145538b8f985d8991489b076daec514c
                e503c2dd97ba78597f6ff6e4393132753573f6
            89/
                e95ab44dc74c5be08339a937908a73c15c86ab
            45/
                1025e2c7d24e9e02a2042025b688da7e0b9265
            1f/
                4f29575e1f6bb70994cf4109063306dfa94f00
                c6d4dc8820ba1e2889b3775bb0089ada9e3058
            73/
                156d17b5cf02bea58cd1dcf3c94891ef33ace9
                b730a705ad39f9a44edf4f9bc1590b8d1e0502
            87/
                dccf15ed906cfdb5034b1444a35328f01c714b
                33eb665e66c1d4cad7c3e34bcb4f158b995683
            80/
                5a34b5bddee7b4b3e6d22978d2f9fe072453ae
                6dc5c4339db0a8769f475b4b7dddf1b38cff5c
            74/
                78c2c4e6ce6794489a5586632db235cdd95e29
            1a/
                7524055134bdd637d4a683e4831fe921d60ede
                86433c223039bda5f68f8b6ef10d15e5e0eff7
                a091da946b7cfd877812325d79a619753c3641
            28/
                a3745d4387a9294167a2916c9f1f3b854722a5
                1150026b2927e55cf6efed64478feffe07c39b
            17/
                19fbce9fbbf74de1cbef561df9c6243bdef9f9
                d1ad67cdcca17f6ddcdbb4edf062a9f2b49b60
            7e/
                735db15cf33805b1ab498b4476f218d4f690a5
                51161af61a7eb15f9a215e8b46353d186073bc
                12a81578bc2cb6d2da94716d29be93ee049835
                46c33707ffd9c461ce9e22c53697f22fc8659c
                b0de97ab2784bec6ef21cd5aceb3ef1ccbdab4
            10/
                890fe9f7e48f82fba5254e37f3ea0f6ca6132c
                afabf92b1ce14b7c9da14c8f88e4e6b2437edc
                504d4a8415ce8a543e248477cd05da12eb43ba
                be74d08961696dddfefdb137b30bde7edd0f14
            19/
                032ce951b9dad55384daeab2e2e64870ee571b
            4c/
                bcb19b3a36f48362f4bdf8c80b7377e22b2987
                a5748c3867383a078312e5200b6cb12d40af20
            26/
                d33521af10bcc7fd8cea344038eaaeb78d0ef5
                5964faab358d21257e6966e11ba93f5e363656
                a9421ab9570e8e689eccc3fc93094d9266f7e4
            21/
                5482c45a6a23b9357c134ba7c57545ccd21417
                3ec27209bced45f25e4451968930393ba7c4c8
                3fe5586bcaecdea0bc5763579398408f2e6b02
            4d/
                ca94f414ee9fdfa596cf9cc0148b7673353d90
                0b7d3e345cd5b1119ee1868ab826d9a1c87fd5
                f8dcb4adb98863c585f07cc744da604e856dcd
                80338ce6df261e3ba456189bb09c4add5a3ca5
            75/
                0b3207aeb800f8e76420253229bd1c5c135d0d
                341ad6835c32a3e6b34d274e8b43e579bf4e8e
            86/
                8447e3249386faccc505dffb05a5cf6f23aead
            72/
                2a06f9623c906cfb21682678cf8bd8f60183b6
            44/
                2e28e8693bbac569696b5e1bd3a89d8f24c802
                f71a607220f3b8baae001542f9bd29fc89b1e7
            2a/
                8b404b60fad14a4a0fc8fa08f50fad3ba428df
            2f/
                0c5fb0c2f24cd7fbc43d07b8915049c58e6a5e
                93abf538486dd6961cf246a872c89596e184b4
            43/
                1ef0f85304763239da2dabd99423181327bf17
                3e7c8ecb22ff251cbae3d7cb282c121320ff6b
            88/
                b8c4a06912f4b282250cde1e2c7e8d091e9e38
            9f/
                3c51ee8ed8b2785846c1d8992d7248def976cb
                c04094964786db564c511b439244ee7015ccea
            6b/
                d7eaa3e02c80d0cbb01f64869b56e304ec9d5f
            07/
                0b61a26dd6fdd1e1d468b391ab37ac8eff4c57
                6f1ba379086ccbbe90577c79da7919c2dcc921
            38/
                f767fe31ed002c0b2e17c4e74335f9a190e20f
                fa9044428c3a4d39abd6bd57104654b5519ea9
            00/
                5b7768c8e38b3efb3b5ed217ef8907924c514d
            6e/
                8ad7195503b13ce31e06df9883e0c94cba416f
            9a/
                c4aa93c518c39d74ea2b66ddb6bd11c95266f8
            5c/
                752130bb287995bf669b9f7d4de77d887d65ea
                1e31b70fab9553c58eba6b4a6d1e9875eb50a7
            09/
                ec9fad62d01b047942f1034f8f634b6cb39038
                b40f337f36dafc34f9010f410da1fb03b99b6b
            5d/
                7766f676cf4b1aac7c8811d9fb6b78746a79fa
            info/
                commit-graph
                packs
            91/
                97603c6a5e1b17afb297ece98a9b44ef2579bf
                eb5992d43500abe3d7ce175c46cb3b3b5b3940
            65/
                ea82e3b1d97a0aa760a99c2238671c63d7b7d5
            62/
                1c56565d38595d40702d5d73a65c221dae3c5d
            96/
                a4c62ef4c353109f22c5d4c7bf7827fe74597b
                b87fdd708ef19fc3c6e466c44d7c212efa1d14
            3a/
                1976851bc6170ec7febd867437ef6e98668dc1
            54/
                91b611e7e5011ff605467fef8de53549e935ba
            3f/
                1e5d2272b6db4e812fabbc5454fbe8215dfb85
                87410ba34ab8c6cb486f51f973187a040ee4bb
            30/
                69c6f27bfdec0b246d21311f50951e5ed6c356
                255ff377719751d344db5ffb76e5979bac077c
            5b/
                885a1486f32d8eae919a45359eb3ec680da6c7
            08/
                7d8003a711adc3f0c48e398bcdc6b655d4e8dd
                330f2ef2ac2d5a4e1d37dabf96b5da72269be9
            6d/
                36ca5699e7bfd09ce502fc948a199c9355aab8
            6c/
                f50c464968f05df7ec81a1d7d9ba752488f6d8
            39/
                034a7bb81096fe6a246b80e4c9782e3216bf5f
            99/
                d08f4b614cff182d824a5582d661525377f26d
                03955900f2c5feb1e16ca101e0b9fbc7cdf092
                783ac54fe7ee7b5c36ab19e2147e47d2304564
                d91781151f20a3c34a69a52cff33ddebf85192
            55/
                ea778fda9ba3c89bf403a64c48fdc3f48c89fa
            97/
                56c4d25d72a8d3d7ae33cc1892dbbc18b697b0
                417d0ff321cca43e06b7458b80c443d5d7f5f6
                910a9949126a13793506efed884f378fc8449a
            63/
                a63497ba030586c0d5d1a8ec30f2b1c7d3aaaf
                30aa6cc6131ff999e3bd557346a57a0dfe1a95
                eab7114b0b2c0629514996dcae2dd267cb5e1a
                a7d66c3b4f012f0ad58856eef58708ffde6c5b
                697e38849c6c1876ad8bfe8d8d1e3dd15be0bd
            0f/
                37aac357053588cbe43a48c2e3522525a489d4
                d404b82d8022d0b4a85e158668bb9fc2769dbe
            0a/
                8dd780b60dd3448e337a4f0d52781343c53eb0
            64/
                0285e41a86d4d405ad04d65ff21dd2484b928b
                e1caad34d1ced8f681e3ba7722cfefde077fde
                8384df67a6ca5951190ec2315742edf34b8d41
                1feb098a3a1ad92ee468cc9ab41506185c2e49
            90/
                d5e73f8a88fe13161b2c2b763e83411ee06b02
                07e6b00f1ae052d5ff358e729de305efc3559f
            bf/
                81f35beea07595a0cfbbab349a18c0ce7942dc
                9985d3f44610bd43d9daada9876db12100d504
            d3/
                daeab8909597077addecf34ab05800705f77c8
            d4/
                6eb0384cfaad37801b96e9cf9f5cfd1b2c1046
                922a1df5b3c8604a1f8ad3e0aa1b7623340b7e
            ba/
                8cf55df395cf7c61ae06830647034b2477f7d1
            a0/
                70678a8d3daee8a93f274b6ac646a4326ee4f6
                6f61121033496de6b87818044e20a22e83bb01
            a7/
                48c786500edd8dc7d53f00468b6e0490220aba
            b8/
                6c2c63e28d144f1179f52ddc307147f9f95c7b
                f60e0a347f8c9ff7ac86db7a22045c40d1767b
            b1/
                c3e406e07dee853e76ef86b6cf660645210690
            dd/
                e8d9e52337777524f67a1b3d677e8fcd436a38
                407a06dc4becc6cf55bfa023e2b114d5013138
                02f973ffac9248294c499ec7cbdedb5991162a
            b6/
                79d603499111e95a26d28cb94a2236e39ba7aa
                64d61937be6fa51d59453a7c21228b5d2ace7a
                9f02c3db1157003a3b74385ec92b0947346e00
            a9/
                9ca7f98442e52208261ce1ef905644184abf59
            d5/
                2574aadaa5466628096e88ba7ea4fcb57c4988
                3bfdc41b21e2442ad027d96ac4cc8247d1ff21
            d2/
                b6342a60015c3aaecd65cb5246b0a17bd4f023
            aa/
                1cae9eeb451b0aefffeb7f5c6ea75753b6a190
                e4437eae3bb0623eccd835b28d886b9bdb3d18
                00ffab7828f4818589659c804ec2cfd99baed3
            af/
                662e3faa7f3e6108b9c272e964d42562faf29c
                c144f5095a3fa7220f628188ab8331a5244376
            db/
                dd2bb00d7efbb51c30d1959d254ee3ad408c00
                2690adb6ba779339fa8968de07c805bc8512d0
            b9/
                5f3455f188ba696cc903aec6aed448ef795269
            a1/
                ca1d3f4e246eb6b7bc4bc078b0cce37cc27e42
            ef/
                bdce6dc4bc4d897e83466645600d4eaed27f5f
            c3/
                1eb0133f8c4ef3f4730b81e2fd46abcec76e7c
                f22d6c3f71b11e9327ac8dd216dd20a0832ff4
            e1/
                25515c2d4916c1c035b996cc01fd022854d7e5
                ffdbed0d8ca663cfcab21818bb3f9c6938c7a2
                4fd06362d16537ee75f3720594cb22e07fbcc4
            cd/
                a32c34aaa0424f4d45504c230e02a4dc7ffb58
                ff5d4e99af7446db16465c7e330881459aac0a
            cc/
                61f2c31bb9542fb10951dbb2235405c9d9eeba
                a04651c9f6395e6450ca9c748fe3f13ee50c65
                a5bbecf021a598719b9050cc796f6a50a3c44b
                64811a2b4c2dda3724e44c3a61b378ed22c7f6
            e6/
                d0fe2f94f09852620d58d4db90c08c4aa72f1a
            f9/
                3e3a1a1525fb5b91020da86e44810c87a2d7bc
                76fdfc57b827b4563ae7527439d723301cf775
            f0/
                43bd6a52ff3034badce4ea06ec85d08b1bac66
            f7/
                ff128cf47fe3546d1195bad6dae0f56c8f1dc2
            e8/
                cd7e7e8c16d8b6e7287917afc38cfddca9e73c
            fa/
                781916e8b571323735773d423a0f06f56d9787
            ff/
                ed1247dd05d8b081bc89e944a190e6848e6ff6
                4421aeeff0fdae521e53d515e218e4d42bc840
            c2/
                e61e5800bbd8c07d848c0d5ec8deb4b4fe03fd
            f6/
                42c3f7a77a5833bc3dfee643ad8ca6387b23e7
                7ad9df37008043a00d8b7ce8e1f1e3f455ed6b
                a42155ad81f648ca22e06d250f39e4ef718924
            e9/
                a1dfe12299e9d7e436e832c0c393e05b311c73
            e7/
                51d919cb3a391b58958c55ecda6ee9722a3e12
                9d375c55cf1bf2705f80a11610f6cf22c3a18c
            cb/
                3268db161cc71a12a034c8b0b90296bb5436ac
                7b84a263419cabde0aa38ddad00e79b4db68ab
                ea53adacf2a73a8cd8d3bd318a3178c1aeac19
            f8/
                77edd3edb0da5f99caf867dc673b02a95b068e
            ce/
                1cbf714209f45d018eb27a49cc64e1ff3e41fe
                13ce8f9a17c05fe671b9b7ad7fa434cd495f68
                63f7f9e293c1c1829e9aef5361e0820ae3e346
                745249954da7cf3dcb0fb2705f1fcc01ffed6b
            e0/
                8f725d01e2362d284bb8ac3f0691545c633192
                9f00dac767d374de41e793740546e6ab3f9c1e
            46/
                b084d7583aaa6d35ee5c7bf2621f9b8ba66ce9
                3551f3caf88a9c75be03ac76ed9413653b5a8d
            2c/
                5649d31089b222143ad84b00aac9c4136905c5
            2d/
                c4c7c66104d7ca616e8b3b588f7fc60fec6cf7
                17b9d8e057659eba3730ad1917efd98ef89a5c
            83/
                2df903eeeb929e52e576c0ffd8db930cecb3b4
                fe060c65559b73ee5a8aac1d47bc88d189367e
            1b/
                5009d85838d2d336342e3268acebe92c02bc71
                a7b40bef7ef1f6efbe0718d3d00ac3f9f3910e
                c8724a79a21465291b3c0424f1280dd4eda9ac
            77/
                42007394da5baf57cabe05ac383f41d7b80eae
                6a920e25adb0bed64dbf837df5757fb5b99d5e
                6310f75b53df0f3f213be4f56594f3eab373f8
                74b3c3b97cff35139cb7fe157e357b85800bba
            48/
                93aa2f70d916528dfc3a1a7cd44e45439e26b6
                721eaa4dae63514987494ec6023078461a8bd3
                1e15de29508c805a4b0545c558d549d0678fa3
                548b542f7df91c1c1d0e339068636437c8fdb8
            4a/
                0b3bf009dc8aa9634681bd11b863924457c5e3
            24/
                2b81a45f8540831ef7c40536f79530b6652c62
                586d5e91eae70bf5dac3a0bc4518fd7f7fe047
                3e423c6fc96f711d39ab235fa6000e99e7ae1c
                f3bc2d61addd21f3d6c65f603e647ab8480fe0
                9db0c65e14a4c9a02c73e9c6e6152089257012
            23/
                a8e673cee1ad2cc68b98c0fe2492819b540fa0
            4f/
                665d19b5721a9aee51cb70a7f38654388e92f1
                be11cdbcca38de9e9d39101026b763f75376f0
            8d/
                59efad3679f4c5c53e56fb5610ac5200567f70
                ce4e44e5263843e5d9efc636af8af6a1699fd5
                5c6a3a9f6c2f4277734e20c504c3e0d50f23e1
            8c/
                b8a2b12cb7207f971f93f5e3f6fcfff8863d4c
                0a9bbe1c0b0c2726a6b31bd89a567c68ee16a7
                38f3f3dad51e4585f3984282c2a4bec5349c1e
            85/
                31da01388667f27ffb632b9ba6bd3292ecbc25
            1d/
                52c260f2987b63385bf9aa4e04eb7a410a0202
            71/
                b29b501713c5c244ead7ca63fd720eb3a5016f
                d96cf1433fb4293e34dd9f5cb6a98077b2acaf
                16d6c1dfdf05c6a3c0d2a372fb992a03e4d25b
                2ab9d985c20018a0c97b93d2148ac1ffe588a5
            76/
                8d8b9f78614af6781eb96b5116a80cff9aeefd
                136967dd4d8108eeee577083174172e890a6fd
            1c/
                a64ae5b08ed18efda27c9a58a8496d31afac2a
                39f672103d721b9e82e3d98f35f2f5051a7a9f
                6b99fc0946c3f41df99174e3621eb88d3c23e7
                bef161f6459c7db209538321e0b2517b7523a1
                60dbbb49eea6b756663df07c699222fcece365
            82/
                30007141a7e0d6d361b097f47b8e281c91c878
                dbbb7a212113654ec2da3da4b7b1dad3a7e160
            40/
                59b15544994e5e73e9b219c31627055dfa17bc
            2e/
                c2434077d2570a8fa4f4dc43de87d579e4eef1
                0d3832c9299c3994f627cd64ed0341a5da7b14
                48f604c50f0debe001a2cdfed1502e34104836
            2b/
                74058d23746b6aa789693573283ed969821274
            47/
                fe25b5972e7ba0c4d56bf0f264d5294403adaf
            78/
                7558c318201d4301ce09be74a5e3f59fc69a8d
            8b/
                71686ec520d312b40174cd54e930a208cc602d
            7f/
                37b5d99122b4928505d1e0ac5ca7279edd56ed
                dc4e1180b51954b2787594372da17c05527ed5
            7a/
                80401024b9b57a37572113ca3ba30aa672c0b5
            14/
                62b2d3be966e0537754d938217c052244c5637
            8e/
                d193c8a635aec4a8a895ba0761afdc69173fb1
            22/
                8854f3b00be502dbb2deed17020bbfe915556d
            25/
                4ea9adbd4b252073d259c76c14504315d2aa04
                a8805aa025a301edc5b224614e2d1b77658952
                d89c6870401d398e81d5cb6dfeca6a25dee4fd
                0541e8bfc50b763470fb12436d1ff9c50f1de4
        info/
            exclude
            refs
        logs/
            HEAD
            refs/
                stash
                heads/
                    master
                remotes/
                    origin/
                        master
        hooks/
            commit-msg.sample
            post-commit
            pre-rebase.sample
            sendemail-validate.sample
            pre-commit.sample
            post-checkout
            applypatch-msg.sample
            fsmonitor-watchman.sample
            pre-receive.sample
            prepare-commit-msg.sample
            post-update.sample
            pre-merge-commit.sample
            pre-applypatch.sample
            pre-push
            post-merge
            pre-push.sample
            update.sample
            push-to-checkout.sample
        refs/
            heads/
                master
            tags/
            remotes/
                origin/
                    master
        lfs/
            cache/
                locks/
                    refs/
                        heads/
                            master/
                                verifiable
            objects/
                aa/
                    f5/
                        aaf55515f389beb94bb910ccac3c1a7accedb024398790d9922cfab160060e1f
            tmp/
    htmlcov/
        index.html
        z_0f2a6d05f022106d_urls_py.html
        style_cb_8e611ae1.css
        z_0f2a6d05f022106d___init___py.html
        z_93cd723ed25519de_models_py.html
        z_0f2a6d05f022106d_settings_py.html
        z_93cd723ed25519de_forms_py.html
        z_93cd723ed25519de_apps_py.html
        keybd_closed_cb_ce680311.png
        coverage_html_cb_6fb7b396.js
        .gitignore
        z_93cd723ed25519de_views_py.html
        z_93cd723ed25519de___init___py.html
        function_index.html
        z_b5d5271b29fc09bf_manage_py.html
        z_93cd723ed25519de_admin_py.html
        z_93cd723ed25519de_urls_py.html
        status.json
        favicon_32_cb_58284776.png
        class_index.html
    .vscode/
        settings.json
        tasks.json
    .idea/
        encodings.xml
        jarRepositories.xml
        vcs.xml
        .gitignore
        workspace.xml
        misc.xml
        compiler.xml
