selestino/
    .DS_Store
    requirements.txt
    output.log
    generate_project_structure.py

    # Content of generate_project_structure.py:
    import os
    
    def list_files(startpath):
        with open('project_structure_and_code.txt', 'w') as f:
            for root, dirs, files in os.walk(startpath):
                # Exclude the env directory
                dirs[:] = [d for d in dirs if d != 'env']
                level = root.replace(startpath, '').count(os.sep)
                indent = ' ' * 4 * (level)
                f.write('{}{}/\n'.format(indent, os.path.basename(root)))
                subindent = ' ' * 4 * (level + 1)
                for file in files:
                    f.write('{}{}\n'.format(subindent, file))
                    if file.endswith('.py'):
                        f.write('\n{}# Content of {}:\n'.format(subindent, file))
                        with open(os.path.join(root, file), 'r') as py_file:
                            for line in py_file:
                                f.write('{}{}'.format(subindent, line))
                        f.write('\n')
    
    if __name__ == "__main__":
        project_root = os.path.dirname(os.path.abspath(__file__))
        list_files(project_root)
        print("Project structure and code have been written to 'project_structure_and_code.txt'")

    .gitignore
    .gitattributes
    Jenkinsfile
    project_structure_and_code.txt
    selestino/
        verify_setup.py

        # Content of verify_setup.py:
        import os
        import subprocess
        
        def run_command(command, description):
            print(f"Running: {description}...\nCommand: {command}\n")
            result = subprocess.run(command, shell=True, capture_output=True, text=True)
            if result.returncode != 0:
                output = f"Error: {result.stderr.strip()}\n"
            else:
                output = result.stdout.strip()
            print(output + "\n")
            return output
        
        def main():
            # Prompting user for custom names and paths
            project_name = input("Enter your Django project name (e.g., 'myproject'): ")
            db_name = input("Enter your PostgreSQL database name (e.g., 'myprojectdb'): ")
            db_user = input("Enter your PostgreSQL username (e.g., 'myprojectuser'): ")
            db_password = input("Enter your PostgreSQL password: ")
            github_username = input("Enter your GitHub username: ")
            
            verification_output = []
        
            # Step 1: Install Python and Django
            verification_output.append("Step 1: Install Python and Django")
        
            # 1.1 Check Python Installation
            verification_output.append("Check Python Installation:")
            python_version = run_command("python3 --version", "Checking Python version")
            verification_output.append(python_version)
        
            # 1.2 Check pip and virtualenv installation
            verification_output.append("Check pip and virtualenv Installation:")
            pip_version = run_command("python3 -m pip --version", "Checking pip version")
            verification_output.append(pip_version)
            virtualenv_version = run_command("virtualenv --version", "Checking virtualenv version")
            verification_output.append(virtualenv_version)
        
            # 1.3 Check Virtual Environment Activation
            verification_output.append("Check Virtual Environment Activation:")
            env_name = os.getenv('VIRTUAL_ENV')
            if env_name:
                verification_output.append(f"Virtual environment is activated: {env_name}")
            else:
                verification_output.append("Virtual environment is NOT activated")
        
            # 1.4 Check Django Installation
            verification_output.append("Check Django Installation:")
            django_version = run_command("django-admin --version", "Checking Django version")
            verification_output.append(django_version)
        
            # 1.5 Check Django Project Structure
            verification_output.append("Check Django Project Structure:")
            project_structure = run_command(f"ls {project_name}", f"Listing Django project files in {project_name}")
            verification_output.append(project_structure)
        
            # Step 2: Database Setup with PostgreSQL
            verification_output.append("\nStep 2: Database Setup with PostgreSQL")
        
            # 2.1 Check PostgreSQL Installation
            verification_output.append("Check PostgreSQL Installation:")
            psql_path = run_command("which psql", "Checking PostgreSQL installation")
            verification_output.append(psql_path)
        
            # 2.2 Verify Database Creation
            verification_output.append("Verify PostgreSQL Database Creation:")
            db_list = run_command("psql -c '\\l'", "Listing PostgreSQL databases")
            verification_output.append(db_list)
        
            # 2.3 Test Django-PostgreSQL Connection
            verification_output.append("Test Django-PostgreSQL Connection:")
            migrate_result = run_command(f"python manage.py migrate", "Testing database migration")
            verification_output.append(migrate_result)
        
            # Step 3: Version Control with Git
            verification_output.append("\nStep 3: Version Control with Git")
        
            # 3.1 Check Git Status
            verification_output.append("Check Git Status:")
            git_status = run_command("git status", "Checking git status")
            verification_output.append(git_status)
        
            # 3.2 Check Git Log
            verification_output.append("Check Git Log:")
            git_log = run_command("git log --oneline", "Checking git log")
            verification_output.append(git_log)
        
            # Write the outputs to a file
            with open("verification_output.txt", "w") as f:
                for line in verification_output:
                    f.write(line + "\n")
        
            print("All steps completed. Output saved to 'verification_output.txt'.")
        
        if __name__ == "__main__":
            main()

        verification_output.txt
        requirements.txt
        manage.py

        # Content of manage.py:
        #!/usr/bin/env python
        """Django's command-line utility for administrative tasks."""
        import os
        import sys
        
        
        def main():
            """Run administrative tasks."""
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
            try:
                from django.core.management import execute_from_command_line
            except ImportError as exc:
                raise ImportError(
                    "Couldn't import Django. Are you sure it's installed and "
                    "available on your PYTHONPATH environment variable? Did you "
                    "forget to activate a virtual environment?"
                ) from exc
            execute_from_command_line(sys.argv)
        
        
        if __name__ == '__main__':
            main()

        selestino/
            asgi.py

            # Content of asgi.py:
            """
            ASGI config for selestino project.
            
            It exposes the ASGI callable as a module-level variable named ``application``.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.0/howto/deployment/asgi/
            """
            
            import os
            
            from django.core.asgi import get_asgi_application
            
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
            
            application = get_asgi_application()

            __init__.py

            # Content of __init__.py:

            settings.py

            # Content of settings.py:
            """
            Django settings for selestino project.
            
            Generated by 'django-admin startproject' using Django 5.0.7.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.0/topics/settings/
            
            For the full list of settings and their values, see
            https://docs.djangoproject.com/en/5.0/ref/settings/
            """
            
            from pathlib import Path
            
            # Build paths inside the project like this: BASE_DIR / 'subdir'.
            BASE_DIR = Path(__file__).resolve().parent.parent
            
            
            # Quick-start development settings - unsuitable for production
            # See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/
            
            # SECURITY WARNING: keep the secret key used in production secret!
            SECRET_KEY = 'django-insecure-f#1peyf4^2gxuzrv&8c6pee886srz15*640%-vu&xfkc_iiwvz'
            
            # SECURITY WARNING: don't run with debug turned on in production!
            DEBUG = True
            
            ALLOWED_HOSTS = []
            
            
            # Application definition
            
            INSTALLED_APPS = [
                'django.contrib.admin',
                'django.contrib.auth',
                'django.contrib.contenttypes',
                'django.contrib.sessions',
                'django.contrib.messages',
                'django.contrib.staticfiles',
                'recipeservice',  # <-- Add this line
            ]
            
            MIDDLEWARE = [
                'django.middleware.security.SecurityMiddleware',
                'django.contrib.sessions.middleware.SessionMiddleware',
                'django.middleware.common.CommonMiddleware',
                'django.middleware.csrf.CsrfViewMiddleware',
                'django.contrib.auth.middleware.AuthenticationMiddleware',
                'django.contrib.messages.middleware.MessageMiddleware',
                'django.middleware.clickjacking.XFrameOptionsMiddleware',
            ]
            
            ROOT_URLCONF = 'selestino.urls'
            
            TEMPLATES = [
                {
                    'BACKEND': 'django.template.backends.django.DjangoTemplates',
                    'DIRS': [],
                    'APP_DIRS': True,
                    'OPTIONS': {
                        'context_processors': [
                            'django.template.context_processors.debug',
                            'django.template.context_processors.request',
                            'django.contrib.auth.context_processors.auth',
                            'django.contrib.messages.context_processors.messages',
                        ],
                    },
                },
            ]
            
            WSGI_APPLICATION = 'selestino.wsgi.application'
            
            
            # Database
            # https://docs.djangoproject.com/en/5.0/ref/settings/#databases
            
            DATABASES = {
                'default': {
                    'ENGINE': 'django.db.backends.postgresql',
                    'NAME': 'selestino',
                    'USER': 'josuejero',
                    'PASSWORD': 'peruano1',
                    'HOST': 'localhost',
                    'PORT': '',
                }
            }
            
            
            # Password validation
            # https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators
            
            AUTH_PASSWORD_VALIDATORS = [
                {
                    'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
                },
                {
                    'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
                },
            ]
            
            
            # Internationalization
            # https://docs.djangoproject.com/en/5.0/topics/i18n/
            
            LANGUAGE_CODE = 'en-us'
            
            TIME_ZONE = 'UTC'
            
            USE_I18N = True
            
            USE_TZ = True
            
            
            # Static files (CSS, JavaScript, Images)
            # https://docs.djangoproject.com/en/5.0/howto/static-files/
            
            STATIC_URL = '/static/'
            STATICFILES_DIRS = [BASE_DIR / "static"]
            
            
            # Default primary key field type
            # https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field
            
            DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

            urls.py

            # Content of urls.py:
            from django.contrib import admin
            from django.urls import include, path
            
            urlpatterns = [
                path('admin/', admin.site.urls),
                path('', include('recipeservice.urls')),
            ]

            wsgi.py

            # Content of wsgi.py:
            """
            WSGI config for selestino project.
            
            It exposes the WSGI callable as a module-level variable named ``application``.
            
            For more information on this file, see
            https://docs.djangoproject.com/en/5.0/howto/deployment/wsgi/
            """
            
            import os
            
            from django.core.wsgi import get_wsgi_application
            
            os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'selestino.settings')
            
            application = get_wsgi_application()

            __pycache__/
                urls.cpython-312.pyc
                settings.cpython-312.pyc
                wsgi.cpython-312.pyc
                __init__.cpython-312.pyc
        recipeservice/
            models.py

            # Content of models.py:
            from django.db import models
            
            class Ingredient(models.Model):
                name = models.CharField(max_length=100)
                quantity = models.CharField(max_length=50)
            
                def __str__(self):
                    return self.name
            
            class Recipe(models.Model):
                title = models.CharField(max_length=200)
                description = models.TextField()
                ingredients = models.ManyToManyField(Ingredient)
                instructions = models.TextField()
                prep_time = models.IntegerField(default=0)  # Default to 0 minutes
                cook_time = models.IntegerField(default=0)  # Default to 0 minutes
                total_time = models.IntegerField(editable=False, blank=True, null=True)
                cuisine_type = models.CharField(max_length=100, default='Unknown')  # Add this line
                difficulty = models.CharField(max_length=50, choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy')  # Add this line
            
                def save(self, *args, **kwargs):
                    self.total_time = (self.prep_time or 0) + (self.cook_time or 0)
                    super().save(*args, **kwargs)
            
                def __str__(self):
                    return self.title
            
            class Review(models.Model):
                recipe = models.ForeignKey(Recipe, on_delete=models.CASCADE, related_name='reviews')
                user = models.CharField(max_length=100)
                rating = models.PositiveSmallIntegerField(choices=[(i, i) for i in range(1, 6)])
                comment = models.TextField(blank=True, null=True)
                created_at = models.DateTimeField(auto_now_add=True)
            
                def __str__(self):
                    return f"{self.user}'s review of {self.recipe.title}"

            __init__.py

            # Content of __init__.py:

            apps.py

            # Content of apps.py:
            from django.apps import AppConfig
            
            
            class RecipeserviceConfig(AppConfig):
                default_auto_field = 'django.db.models.BigAutoField'
                name = 'recipeservice'

            forms.py

            # Content of forms.py:
            from django import forms
            from .models import Recipe, Ingredient
            
            class RecipeForm(forms.ModelForm):
                class Meta:
                    model = Recipe
                    fields = ['title', 'description', 'ingredients', 'instructions', 'prep_time', 'difficulty', 'cuisine_type']
                    widgets = {
                        'ingredients': forms.CheckboxSelectMultiple(),
                    }
            
            class IngredientForm(forms.ModelForm):
                class Meta:
                    model = Ingredient
                    fields = ['name', 'quantity']

            admin.py

            # Content of admin.py:
            from django.contrib import admin
            
            # Register your models here.

            tests.py

            # Content of tests.py:
            from django.test import TestCase
            from django.urls import reverse
            from .models import Recipe, Ingredient
            from .forms import RecipeForm
            
            class RecipeModelTest(TestCase):
                def setUp(self):
                    self.ingredient1 = Ingredient.objects.create(name='Tomato', quantity='2')
                    self.ingredient2 = Ingredient.objects.create(name='Onion', quantity='1')
                    self.recipe = Recipe.objects.create(
                        title='Tomato Soup',
                        description='A delicious tomato soup',
                        instructions='Boil the ingredients...',
                        prep_time=10,
                        cook_time=20
                    )
                    self.recipe.ingredients.add(self.ingredient1, self.ingredient2)
            
                def test_ingredient_creation(self):
                    ingredient = Ingredient.objects.get(name='Tomato')
                    self.assertEqual(ingredient.name, 'Tomato')
            
                def test_recipe_creation(self):
                    self.assertEqual(self.recipe.title, 'Tomato Soup')
                    self.assertEqual(self.recipe.total_time, 30)
                    self.assertIn(self.ingredient1, self.recipe.ingredients.all())
            
                def test_recipe_list_view(self):
                    response = self.client.get(reverse('recipe_list'))
                    self.assertEqual(response.status_code, 200)
                    self.assertTemplateUsed(response, 'recipeservice/recipe_list.html')
                    self.assertContains(response, 'Tomato Soup')
            
                def test_recipe_detail_view(self):
                    response = self.client.get(reverse('recipe_detail', args=[self.recipe.id]))
                    self.assertEqual(response.status_code, 200)
                    self.assertTemplateUsed(response, 'recipeservice/recipe_detail.html')
                    self.assertContains(response, 'Tomato Soup')
            
                def test_add_recipe_form(self):
                    form_data = {
                        'title': 'Onion Soup',
                        'description': 'A delicious onion soup',
                        'ingredients': [self.ingredient2.id],
                        'instructions': 'Boil the ingredients...',
                        'prep_time': 10,
                        'cook_time': 20,
                        'difficulty': 'Easy',
                        'cuisine_type': 'Unknown'
                    }
                    form = RecipeForm(data=form_data)
                    self.assertTrue(form.is_valid())
                    form.save()
                    self.assertEqual(Recipe.objects.count(), 2)
            
                def test_recipe_missing_ingredient(self):
                    form_data = {
                        'title': 'Incomplete Soup',
                        'description': 'Missing ingredients',
                        'instructions': 'Boil the ingredients...',
                        'prep_time': 10,
                        'cook_time': 20
                    }
                    form = RecipeForm(data=form_data)
                    self.assertFalse(form.is_valid())

            urls.py

            # Content of urls.py:
            from django.urls import path
            from . import views
            
            urlpatterns = [
                path('', views.recipe_list, name='recipe_list'),
                path('recipe/<int:id>/', views.recipe_detail, name='recipe_detail'),
                path('recipe/add/', views.add_recipe, name='add_recipe'),
            ]
            views.py

            # Content of views.py:
            from django.shortcuts import render, redirect
            from .models import Recipe
            from .forms import RecipeForm
            
            def recipe_list(request):
                recipes = Recipe.objects.all()
                return render(request, 'recipeservice/recipe_list.html', {'recipes': recipes})
            
            def recipe_detail(request, id):
                recipe = Recipe.objects.get(id=id)
                return render(request, 'recipeservice/recipe_detail.html', {'recipe': recipe})
            
            def add_recipe(request):
                if request.method == 'POST':
                    form = RecipeForm(request.POST)
                    if form.is_valid():
                        form.save()
                        return redirect('recipe_list')
                else:
                    form = RecipeForm()
                return render(request, 'recipeservice/recipe_form.html', {'form': form})

            migrations/
                0002_rename_difficulty_level_recipe_difficulty_and_more.py

                # Content of 0002_rename_difficulty_level_recipe_difficulty_and_more.py:
                # Generated by Django 5.1 on 2024-08-10 19:05
                
                from django.db import migrations, models
                
                
                class Migration(migrations.Migration):
                
                    dependencies = [
                        ('recipeservice', '0001_initial'),
                    ]
                
                    operations = [
                        migrations.RenameField(
                            model_name='recipe',
                            old_name='difficulty_level',
                            new_name='difficulty',
                        ),
                        migrations.AddField(
                            model_name='recipe',
                            name='cuisine_type',
                            field=models.CharField(default='International', max_length=100),
                        ),
                    ]

                __init__.py

                # Content of __init__.py:

                0001_initial.py

                # Content of 0001_initial.py:
                # Generated by Django 5.1 on 2024-08-10 18:48
                
                import django.db.models.deletion
                from django.db import migrations, models
                
                
                class Migration(migrations.Migration):
                
                    initial = True
                
                    dependencies = [
                    ]
                
                    operations = [
                        migrations.CreateModel(
                            name='Ingredient',
                            fields=[
                                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                                ('name', models.CharField(max_length=100)),
                                ('quantity', models.CharField(max_length=50)),
                            ],
                        ),
                        migrations.CreateModel(
                            name='Recipe',
                            fields=[
                                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                                ('title', models.CharField(max_length=200)),
                                ('description', models.TextField()),
                                ('instructions', models.TextField()),
                                ('prep_time', models.IntegerField(help_text='Preparation time in minutes')),
                                ('cook_time', models.IntegerField(help_text='Cooking time in minutes')),
                                ('total_time', models.IntegerField(blank=True, null=True)),
                                ('difficulty_level', models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], max_length=50)),
                                ('created_at', models.DateTimeField(auto_now_add=True)),
                                ('updated_at', models.DateTimeField(auto_now=True)),
                                ('ingredients', models.ManyToManyField(related_name='recipes', to='recipeservice.ingredient')),
                            ],
                        ),
                        migrations.CreateModel(
                            name='Review',
                            fields=[
                                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                                ('user', models.CharField(max_length=100)),
                                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5)])),
                                ('comment', models.TextField(blank=True, null=True)),
                                ('created_at', models.DateTimeField(auto_now_add=True)),
                                ('recipe', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='recipeservice.recipe')),
                            ],
                        ),
                    ]

                0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.py

                # Content of 0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.py:
                # Generated by Django 5.1 on 2024-08-10 19:19
                
                from django.db import migrations, models
                
                
                class Migration(migrations.Migration):
                
                    dependencies = [
                        ('recipeservice', '0002_rename_difficulty_level_recipe_difficulty_and_more'),
                    ]
                
                    operations = [
                        migrations.RemoveField(
                            model_name='recipe',
                            name='created_at',
                        ),
                        migrations.RemoveField(
                            model_name='recipe',
                            name='updated_at',
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='cook_time',
                            field=models.IntegerField(default=0),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='cuisine_type',
                            field=models.CharField(default='Unknown', max_length=100),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='difficulty',
                            field=models.CharField(choices=[('Easy', 'Easy'), ('Medium', 'Medium'), ('Hard', 'Hard')], default='Easy', max_length=50),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='ingredients',
                            field=models.ManyToManyField(to='recipeservice.ingredient'),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='prep_time',
                            field=models.IntegerField(default=0),
                        ),
                        migrations.AlterField(
                            model_name='recipe',
                            name='total_time',
                            field=models.IntegerField(blank=True, editable=False, null=True),
                        ),
                    ]

                __pycache__/
                    0003_remove_recipe_created_at_remove_recipe_updated_at_and_more.cpython-312.pyc
                    0001_initial.cpython-312.pyc
                    0002_rename_difficulty_level_recipe_difficulty_and_more.cpython-312.pyc
                    __init__.cpython-312.pyc
            management/
                commands/
                    seed.py

                    # Content of seed.py:
                    from django.core.management.base import BaseCommand
                    from recipeservice.models import Ingredient, Recipe
                    
                    class Command(BaseCommand):
                        def handle(self, *args, **kwargs):
                            ingredient1 = Ingredient.objects.create(name='Tomato', quantity='2')
                            ingredient2 = Ingredient.objects.create(name='Onion', quantity='1')
                            recipe = Recipe.objects.create(
                                title='Tomato Soup', 
                                description='A delicious tomato soup', 
                                instructions='Boil the ingredients...',
                                prep_time=10,  # Add prep time
                                cook_time=20   # Add cook time
                            )
                            recipe.ingredients.add(ingredient1, ingredient2)

                    __pycache__/
                        seed.cpython-312.pyc
            __pycache__/
                views.cpython-312.pyc
                urls.cpython-312.pyc
                models.cpython-312.pyc
                admin.cpython-312.pyc
                forms.cpython-312.pyc
                tests.cpython-312.pyc
                __init__.cpython-312.pyc
                apps.cpython-312.pyc
            templates/
                recipeservice/
                    ingredient_form.html
                    recipe_detail.html
                    recipe_confirm_delete.html
                    recipe_form.html
                    recipe_list.html
        static/
            recipeservice/
                css/
                    style.css
                js/
                    script.js
    .git/
        ORIG_HEAD
        config
        HEAD
        description
        index
        .MERGE_MSG.swp
        packed-refs
        COMMIT_EDITMSG
        FETCH_HEAD
        objects/
            61/
                ba3c261840f7265ba789d08d18345cc12e8a0e
            0d/
                abe976a9aeee5494762cd3020982081dd62bdd
            95/
                3d742086b64d7ada17575a069be9fc4f0fa082
            92/
                b70c29063e75dcb5aa084cab3ca7450b5b3150
                8a4d3766a3573b3bc3015ade9095127c3e69b0
                5d6e740268967963d3f2dd1ad96a0ce3a08a98
                24c67c8b8c41eaf827657879da174cd7eb7354
            0c/
                f8a04f6a61443588bd12fe6b0debf756c14033
            3e/
                f20519d7b069bd6fba0ec27a2de122bf70d647
            50/
                000ccd54c837167ab31f6a0696614f0fcce51e
            68/
                8fe713674b914c519bef018aa47f7a8ba18d58
            57/
                760814489b55373e21cb3106dea98133e5b53e
                3467f5a71d2a2d2c5ae6d8611c70f95e126e43
                1c76d1968e69c49c8a50fb098348e7c3eb9f4e
            3b/
                0e04887145f2fb573b839a931c94aa57359c7e
                c9366cc00b696a77eb1447e73088f83b1cb683
            9b/
                a164080cc04d6c67b71d82d1adfe3ea68a8ea8
            9e/
                2968e4d777246ebd282adccfa2dfb7ba958742
                c37bc6eba43a42599857fd84e4d68ad6b4ef9d
            04/
                5b1ec71b4b9d0f3064da52d0478a15a9a6c2b3
            6a/
                47e70892e8bb19a892cbd8c375065e8158b98f
            35/
                31f96b1326197877772a08ada29c61dc8069f9
                c01e57312b99eb31d5c0ea6b03c59393dac27c
                eb1ddfbbc029bcab630581847471d7f238ec53
                ed6804458ae390e4376e1cebb6f630e8fe956f
            56/
                67af52f471e6e4472f4a338538c6deec632121
            51/
                90d4215d357458438d62e1167a19ec8417e66e
            3d/
                eeb01aa07c0350643ab1995c43bbedb550c54b
            67/
                5e9b55fb381b000559f7f8e07756a2c644ec1a
                d8f92216a874405a9dbaca5b86112a72c039da
            0b/
                9c1fe0c08003d45f8e17b0532541ef751fe816
                4f9586477862707f5c40eab6f31c07ad8b5912
            0e/
                57972446175deb7e9204ff7fda2fcc7c47e632
            60/
                f23ee7846239d81349ef57a233de586997e38e
                7687b5b78168f8d562ac1ce51d7006f1445000
            5a/
                716c798dd4764e889a8d4230cf2b321012ba31
            5f/
                1f33a46ee15e7e530fed3bb156733aa2d93a72
                31d99b2b275c3683a80af420dfa3bbf358c35d
            33/
                40f360df9b93a42d4fbd246af4e6c3783796b1
            9c/
                22bfaa770daa6a81286206302b6275d632607f
            a4/
                4ff063813b8ccf610e61d6da178f7307935dbe
            a3/
                263b5739d31842e4af16612c55d9574254d7c6
            b5/
                1144080ecc717baba34a917adec0da373a7c0e
            ac/
                6e07a1d1c364a54e622908e48a84ab211f1b4d
            ad/
                2982006f5f91669596a9267c29611443074825
                964d7b17ba025d3488eee2d9e0f887e73fc7b1
            bb/
                afb29cadfc9de5f4b603cb8a420e3deab8b878
                69c3e26399a63c627cefcf7e64dba30c3da5f6
            d7/
                46fa3a350f3d2cd03337f959b896fe4b8de161
            d0/
                fcd53c97011c086aa396aecee8bc4568d3c7d0
            b4/
                4088f87eef3b0f069481a1c11d6b36bc969bd2
            a2/
                7fdfb897ef757aa83d4445f9d43c4e52ecb080
            bd/
                22b6fe01a2b1bfe09d3fbb99cc7aef762979bb
            d6/
                e1191236f69bbf11de65be9fd09cd51adb1b73
            bc/
                d9ec2be6f72e0280069fc51378ee9cce5af085
                1decb354167088b02e91c7e08e54424223b42b
            e5/
                e2f36ca4fc992257fd0bd6b54e31d48406ee3e
            e2/
                51cde18a809fdcc2504c92136dd6b635be7cc7
                c4b9ae60703006a876aad1c52e2b2b9727e800
            f4/
                243ddf1d1465975c53d030d8e8b5fddd04c44d
            c7/
                cee72e870aa265a47a71d2de804c65c721ca66
            ee/
                1b42c959fdcd77a98fac91863b10c55e0ee25d
            c9/
                5f7815cd368217fcd1475e5e7b94851697f036
            f5/
                fd22ea3d637bb7208b617375d27025c1bed8e3
                d62aab0044ec4f3933cf186756dedd23db5231
            e3/
                979ff58b4881a233dd2ba19e4943594dc97d20
            cf/
                315cafc3390b7274a9d0986a196ddee0db6f55
            e4/
                75a019acfb5e0e5a2780e4ab3feb83a0707e52
            fb/
                d6b99d39c740305b83430d79b828b9f29d6b4e
            c1/
                f56149c063f3c580c6b7212894ad99236018ba
                b09a10827f0acf27e4645e468301677586d18a
            4e/
                490eab1427dac749ea799855c1c75180ec256d
            20/
                7ce0745df08efdea808aaab0c14f2084fb09f5
                e5f45db04c623b0025d2a4ce9d99e90ed64d3c
                99ad4d3d8e5b513a403ebdd2dcc860ccae55cb
            18/
                ff2cc856434103ec0159d6d368eeefb801a758
            27/
                a44b61a283e495171d43544a9f754a47bd4dcd
            4b/
                cb9bbf32a258a8586a2e21246f0ca36d2000b0
            pack/
                pack-068120a0efebbb4e2e739403742a1fa948fedd27.pack
                pack-068120a0efebbb4e2e739403742a1fa948fedd27.idx
            7d/
                199d2205997f8286faf49baba7946771ffa85f
            29/
                0e3007ba3297ec7dbab1ffc3a1079ec06e5a56
            7c/
                e503c2dd97ba78597f6ff6e4393132753573f6
            73/
                156d17b5cf02bea58cd1dcf3c94891ef33ace9
            87/
                dccf15ed906cfdb5034b1444a35328f01c714b
                33eb665e66c1d4cad7c3e34bcb4f158b995683
            1a/
                7524055134bdd637d4a683e4831fe921d60ede
                a091da946b7cfd877812325d79a619753c3641
            28/
                a3745d4387a9294167a2916c9f1f3b854722a5
                1150026b2927e55cf6efed64478feffe07c39b
            17/
                19fbce9fbbf74de1cbef561df9c6243bdef9f9
            7e/
                51161af61a7eb15f9a215e8b46353d186073bc
                46c33707ffd9c461ce9e22c53697f22fc8659c
            10/
                890fe9f7e48f82fba5254e37f3ea0f6ca6132c
                be74d08961696dddfefdb137b30bde7edd0f14
            19/
                032ce951b9dad55384daeab2e2e64870ee571b
            26/
                d33521af10bcc7fd8cea344038eaaeb78d0ef5
                5964faab358d21257e6966e11ba93f5e363656
                a9421ab9570e8e689eccc3fc93094d9266f7e4
            21/
                3ec27209bced45f25e4451968930393ba7c4c8
            4d/
                f8dcb4adb98863c585f07cc744da604e856dcd
            75/
                341ad6835c32a3e6b34d274e8b43e579bf4e8e
            86/
                8447e3249386faccc505dffb05a5cf6f23aead
            72/
                2a06f9623c906cfb21682678cf8bd8f60183b6
            44/
                2e28e8693bbac569696b5e1bd3a89d8f24c802
                f71a607220f3b8baae001542f9bd29fc89b1e7
            2f/
                93abf538486dd6961cf246a872c89596e184b4
            43/
                1ef0f85304763239da2dabd99423181327bf17
                3e7c8ecb22ff251cbae3d7cb282c121320ff6b
            88/
                b8c4a06912f4b282250cde1e2c7e8d091e9e38
            9f/
                3c51ee8ed8b2785846c1d8992d7248def976cb
            07/
                6f1ba379086ccbbe90577c79da7919c2dcc921
            6e/
                8ad7195503b13ce31e06df9883e0c94cba416f
            9a/
                c4aa93c518c39d74ea2b66ddb6bd11c95266f8
            09/
                ec9fad62d01b047942f1034f8f634b6cb39038
                b40f337f36dafc34f9010f410da1fb03b99b6b
            info/
                commit-graph
                packs
            91/
                97603c6a5e1b17afb297ece98a9b44ef2579bf
            65/
                ea82e3b1d97a0aa760a99c2238671c63d7b7d5
            62/
                1c56565d38595d40702d5d73a65c221dae3c5d
            3a/
                1976851bc6170ec7febd867437ef6e98668dc1
            3f/
                1e5d2272b6db4e812fabbc5454fbe8215dfb85
            08/
                7d8003a711adc3f0c48e398bcdc6b655d4e8dd
                330f2ef2ac2d5a4e1d37dabf96b5da72269be9
            6c/
                f50c464968f05df7ec81a1d7d9ba752488f6d8
            99/
                d08f4b614cff182d824a5582d661525377f26d
                03955900f2c5feb1e16ca101e0b9fbc7cdf092
                783ac54fe7ee7b5c36ab19e2147e47d2304564
                d91781151f20a3c34a69a52cff33ddebf85192
            55/
                ea778fda9ba3c89bf403a64c48fdc3f48c89fa
            97/
                56c4d25d72a8d3d7ae33cc1892dbbc18b697b0
                417d0ff321cca43e06b7458b80c443d5d7f5f6
            63/
                a63497ba030586c0d5d1a8ec30f2b1c7d3aaaf
                30aa6cc6131ff999e3bd557346a57a0dfe1a95
            0f/
                37aac357053588cbe43a48c2e3522525a489d4
                d404b82d8022d0b4a85e158668bb9fc2769dbe
            0a/
                8dd780b60dd3448e337a4f0d52781343c53eb0
            64/
                0285e41a86d4d405ad04d65ff21dd2484b928b
                8384df67a6ca5951190ec2315742edf34b8d41
                1feb098a3a1ad92ee468cc9ab41506185c2e49
            ba/
                8cf55df395cf7c61ae06830647034b2477f7d1
            a0/
                70678a8d3daee8a93f274b6ac646a4326ee4f6
                6f61121033496de6b87818044e20a22e83bb01
            dd/
                e8d9e52337777524f67a1b3d677e8fcd436a38
            b6/
                79d603499111e95a26d28cb94a2236e39ba7aa
                9f02c3db1157003a3b74385ec92b0947346e00
            a9/
                9ca7f98442e52208261ce1ef905644184abf59
            d5/
                3bfdc41b21e2442ad027d96ac4cc8247d1ff21
            d2/
                b6342a60015c3aaecd65cb5246b0a17bd4f023
            aa/
                e4437eae3bb0623eccd835b28d886b9bdb3d18
                00ffab7828f4818589659c804ec2cfd99baed3
            af/
                662e3faa7f3e6108b9c272e964d42562faf29c
                c144f5095a3fa7220f628188ab8331a5244376
            db/
                dd2bb00d7efbb51c30d1959d254ee3ad408c00
            b9/
                5f3455f188ba696cc903aec6aed448ef795269
            ef/
                bdce6dc4bc4d897e83466645600d4eaed27f5f
            c3/
                f22d6c3f71b11e9327ac8dd216dd20a0832ff4
            e1/
                25515c2d4916c1c035b996cc01fd022854d7e5
                4fd06362d16537ee75f3720594cb22e07fbcc4
            cd/
                ff5d4e99af7446db16465c7e330881459aac0a
            cc/
                61f2c31bb9542fb10951dbb2235405c9d9eeba
                a04651c9f6395e6450ca9c748fe3f13ee50c65
            f0/
                43bd6a52ff3034badce4ea06ec85d08b1bac66
            e8/
                cd7e7e8c16d8b6e7287917afc38cfddca9e73c
            ff/
                4421aeeff0fdae521e53d515e218e4d42bc840
            e7/
                51d919cb3a391b58958c55ecda6ee9722a3e12
            f8/
                77edd3edb0da5f99caf867dc673b02a95b068e
            ce/
                1cbf714209f45d018eb27a49cc64e1ff3e41fe
                63f7f9e293c1c1829e9aef5361e0820ae3e346
                745249954da7cf3dcb0fb2705f1fcc01ffed6b
            e0/
                8f725d01e2362d284bb8ac3f0691545c633192
                9f00dac767d374de41e793740546e6ab3f9c1e
            46/
                3551f3caf88a9c75be03ac76ed9413653b5a8d
            2d/
                c4c7c66104d7ca616e8b3b588f7fc60fec6cf7
            83/
                2df903eeeb929e52e576c0ffd8db930cecb3b4
                fe060c65559b73ee5a8aac1d47bc88d189367e
            77/
                42007394da5baf57cabe05ac383f41d7b80eae
                74b3c3b97cff35139cb7fe157e357b85800bba
            48/
                1e15de29508c805a4b0545c558d549d0678fa3
                548b542f7df91c1c1d0e339068636437c8fdb8
            24/
                586d5e91eae70bf5dac3a0bc4518fd7f7fe047
                3e423c6fc96f711d39ab235fa6000e99e7ae1c
                9db0c65e14a4c9a02c73e9c6e6152089257012
            23/
                a8e673cee1ad2cc68b98c0fe2492819b540fa0
            4f/
                665d19b5721a9aee51cb70a7f38654388e92f1
                be11cdbcca38de9e9d39101026b763f75376f0
            8d/
                59efad3679f4c5c53e56fb5610ac5200567f70
                ce4e44e5263843e5d9efc636af8af6a1699fd5
            8c/
                38f3f3dad51e4585f3984282c2a4bec5349c1e
            85/
                31da01388667f27ffb632b9ba6bd3292ecbc25
            71/
                d96cf1433fb4293e34dd9f5cb6a98077b2acaf
                2ab9d985c20018a0c97b93d2148ac1ffe588a5
            76/
                8d8b9f78614af6781eb96b5116a80cff9aeefd
                136967dd4d8108eeee577083174172e890a6fd
            1c/
                bef161f6459c7db209538321e0b2517b7523a1
                60dbbb49eea6b756663df07c699222fcece365
            2e/
                c2434077d2570a8fa4f4dc43de87d579e4eef1
                48f604c50f0debe001a2cdfed1502e34104836
            47/
                fe25b5972e7ba0c4d56bf0f264d5294403adaf
            7f/
                dc4e1180b51954b2787594372da17c05527ed5
            7a/
                80401024b9b57a37572113ca3ba30aa672c0b5
            14/
                62b2d3be966e0537754d938217c052244c5637
            8e/
                d193c8a635aec4a8a895ba0761afdc69173fb1
        info/
            exclude
            refs
        logs/
            HEAD
            refs/
                stash
                heads/
                    master
                remotes/
                    origin/
                        master
        hooks/
            commit-msg.sample
            post-commit
            pre-rebase.sample
            sendemail-validate.sample
            pre-commit.sample
            post-checkout
            applypatch-msg.sample
            fsmonitor-watchman.sample
            pre-receive.sample
            prepare-commit-msg.sample
            post-update.sample
            pre-merge-commit.sample
            pre-applypatch.sample
            pre-push
            post-merge
            pre-push.sample
            update.sample
            push-to-checkout.sample
        refs/
            heads/
                master
            tags/
            remotes/
                origin/
                    master
        lfs/
            cache/
                locks/
                    refs/
                        heads/
                            master/
                                verifiable
            objects/
                aa/
                    f5/
                        aaf55515f389beb94bb910ccac3c1a7accedb024398790d9922cfab160060e1f
            tmp/
    .vscode/
        settings.json
        tasks.json
    .idea/
        encodings.xml
        jarRepositories.xml
        vcs.xml
        .gitignore
        workspace.xml
        misc.xml
        compiler.xml
